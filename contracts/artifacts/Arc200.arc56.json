{
    "name": "Arc200",
    "structs": {
        "ApprovalStruct": [
            {
                "name": "approvalAmount",
                "type": "uint256"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "byte[]",
                    "name": "name"
                },
                {
                    "type": "byte[]",
                    "name": "symbol"
                },
                {
                    "type": "uint8",
                    "name": "decimals"
                },
                {
                    "type": "uint256",
                    "name": "totalSupply"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_name",
            "args": [],
            "returns": {
                "type": "byte[32]",
                "desc": "The name of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the name of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_symbol",
            "args": [],
            "returns": {
                "type": "byte[8]",
                "desc": "The symbol of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the symbol of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_decimals",
            "args": [],
            "returns": {
                "type": "uint8",
                "desc": "The decimals of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the decimals of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_totalSupply",
            "args": [],
            "returns": {
                "type": "uint256",
                "desc": "The total supply of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the total supply of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_balanceOf",
            "args": [
                {
                    "type": "address",
                    "name": "owner",
                    "desc": "The address of the owner of the token"
                }
            ],
            "returns": {
                "type": "uint256",
                "desc": "The current balance of the holder of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current balance of the owner of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_transfer",
            "args": [
                {
                    "type": "address",
                    "name": "to",
                    "desc": "The destination of the transfer"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to transfer"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfers tokens",
            "events": [
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_transferFrom",
            "args": [
                {
                    "type": "address",
                    "name": "from",
                    "desc": "The source of the transfer"
                },
                {
                    "type": "address",
                    "name": "to",
                    "desc": "The destination of the transfer"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to transfer"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfers tokens from source to destination as approved spender",
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_approve",
            "args": [
                {
                    "type": "address",
                    "name": "spender",
                    "desc": "Who is allowed to take tokens on owner's behalf"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to be taken by spender"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approve spender for a token",
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_allowance",
            "args": [
                {
                    "type": "address",
                    "name": "owner",
                    "desc": "Owner's account"
                },
                {
                    "type": "address",
                    "name": "spender",
                    "desc": "Who is allowed to take tokens on owner's behalf"
                }
            ],
            "returns": {
                "type": "uint256",
                "desc": "The remaining allowance"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current allowance of the spender of the tokens of the owner",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Smart Contract Token Base Interface",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "bg==",
                    "desc": "Name of the asset. Max 32 bytes"
                },
                "symbol": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "cw==",
                    "desc": "Symbol of the asset. Max 8 bytes"
                },
                "decimals": {
                    "keyType": "AVMString",
                    "valueType": "uint8",
                    "key": "ZA==",
                    "desc": "Decimals of the asset. Recommended is 6 decimal places."
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "uint256",
                    "key": "dA==",
                    "desc": "Minted supply"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "balances": {
                    "keyType": "address",
                    "valueType": "uint256",
                    "prefix": "Yg=="
                },
                "approvals": {
                    "keyType": "byte[32]",
                    "valueType": "ApprovalStruct",
                    "prefix": "YQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        593,
                        723
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        724
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        614
                    ],
                    "errorMessage": "Insufficient balance at the sender account"
                },
                {
                    "pc": [
                        371
                    ],
                    "errorMessage": "Name of the asset must be longer or equal to 1 character"
                },
                {
                    "pc": [
                        374
                    ],
                    "errorMessage": "Name of the asset must be shorter or equal to 32 characters"
                },
                {
                    "pc": [
                        145,
                        167,
                        189,
                        214,
                        236,
                        255,
                        271,
                        287,
                        303,
                        319
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        363
                    ],
                    "errorMessage": "Only deployer of this smart contract can call bootstrap method"
                },
                {
                    "pc": [
                        382
                    ],
                    "errorMessage": "Symbol of the asset must be longer or equal to 1 character"
                },
                {
                    "pc": [
                        385
                    ],
                    "errorMessage": "Symbol of the asset must be shorter or equal to 8 characters"
                },
                {
                    "pc": [
                        392
                    ],
                    "errorMessage": "This method can be called only once"
                },
                {
                    "pc": [
                        352
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        148,
                        170,
                        192,
                        217,
                        239,
                        258,
                        274,
                        290,
                        306,
                        322
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        443,
                        458,
                        473,
                        478
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        518
                    ],
                    "errorMessage": "insufficient approval"
                },
                {
                    "pc": [
                        451,
                        466,
                        692
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        526,
                        632,
                        654
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEASAACCYGBBUffHUBYgF0AYAEeYPDXCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEbQQEZggoEl1OC4gRlfRPsBLauGiUEhOwT1QTsmWBBBILlc8QE2nAluQRKlo+PBLVCISUEu7MZ8zYaAI4KALAAoACQAIAAcABdAEcALgAYAAIkQzEZFEQxGEQ2GgE2GgKIAZMoTFCwIkMxGRREMRhENhoBNhoCiAFwKExQsCJDMRkURDEYRDYaATYaAjYaA4gBKShMULAiQzEZFEQxGEQ2GgE2GgKIAQYoTFCwIkMxGRREMRhENhoBiADqKExQsCJDMRkURDEYRIgA1ShMULAiQzEZFEQxGESIAL4oTFCwIkMxGRREMRhEiACfKExQsCJDMRkURDEYRIgAgChMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgSIABEoTFCwIkMxGUD/LzEYFEQiQ4oEATEAMgkSRIv8VwIAFUlEIw5Ei/1XAgAVSUQlDkQkKmVFARREgAFui/xngAFzi/1nKov/Z4ABZIv+ZzEAKUsBUIv/vzIDTFCL/1AnBExQsCuJJIABbmVEVwIASRUjEkSJJIABc2VEVwIASRUlEkSJJIABZGVEiSQqZUSJigEBi/+IAFSJigIBMQCL/ov/iABfiYoDATEAi/1LAYgAtEmL/6dEi/+hSRUjDkQjr6uL/U4CiADASIv9i/6L/4gAMYmKAgExAIv+i/+IAKmJigIBi/6L/4gAe4mKAQEpi/9QSb1FAUAABCcFTImLAL5ETImKAwGL/Yj/4EmL/oj/2kyL/6dEi/2L/hNBACeLAIv/oUkVIw5EI69MSwGrKYv9UEy/iwGL/6BJFSMORKspi/5QTL+L/Yv+UIv/UCcETFCwK4wAiYoCAYv+i/9QAUkVIxJEiYoCAYv+i/+I/+eAAWFMUEm9RQFAAAQnBUyJiwC+RFcAIEyJigMBi/2L/oj/xIv/i/1Qi/5QgAFhTwJQTL+L/Yv+UIv/UIAEGWn4ZUxQsCuJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [
        {
            "name": "arc200_Transfer",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ]
        },
        {
            "name": "arc200_Approval",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "address",
                    "name": "spender"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ]
        }
    ],
    "templateVariables": {}
}