/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client';
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app';
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from '@algorandfoundation/algokit-utils/types/app-arc56';
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client';
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from '@algorandfoundation/algokit-utils/types/app-factory';
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from '@algorandfoundation/algokit-utils/types/composer';
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from '@algorandfoundation/algokit-utils/types/transaction';
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk';

export const APP_SPEC: Arc56Contract = {
  name: 'Arc200',
  structs: {
    ApprovalStruct: [
      { name: 'approvalAmount', type: 'uint256' },
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
  },
  methods: [
    {
      name: 'bootstrap',
      args: [
        { type: 'byte[]', name: 'name' },
        { type: 'byte[]', name: 'symbol' },
        { type: 'uint8', name: 'decimals' },
        { type: 'uint256', name: 'totalSupply' },
      ],
      returns: { type: 'bool' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      events: [
        {
          name: 'arc200_Transfer',
          args: [
            { type: 'address', name: 'from' },
            { type: 'address', name: 'to' },
            { type: 'uint256', name: 'value' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'arc200_name',
      args: [],
      returns: { type: 'byte[32]', desc: 'The name of the token' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Returns the name of the token',
      events: [],
      recommendations: {},
    },
    {
      name: 'arc200_symbol',
      args: [],
      returns: { type: 'byte[8]', desc: 'The symbol of the token' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Returns the symbol of the token',
      events: [],
      recommendations: {},
    },
    {
      name: 'arc200_decimals',
      args: [],
      returns: { type: 'uint8', desc: 'The decimals of the token' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Returns the decimals of the token',
      events: [],
      recommendations: {},
    },
    {
      name: 'arc200_totalSupply',
      args: [],
      returns: { type: 'uint256', desc: 'The total supply of the token' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Returns the total supply of the token',
      events: [],
      recommendations: {},
    },
    {
      name: 'arc200_balanceOf',
      args: [{ type: 'address', name: 'owner', desc: 'The address of the owner of the token' }],
      returns: { type: 'uint256', desc: 'The current balance of the holder of the token' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Returns the current balance of the owner of the token',
      events: [],
      recommendations: {},
    },
    {
      name: 'arc200_transfer',
      args: [
        { type: 'address', name: 'to', desc: 'The destination of the transfer' },
        { type: 'uint256', name: 'value', desc: 'Amount of tokens to transfer' },
      ],
      returns: { type: 'bool', desc: 'Success' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      desc: 'Transfers tokens',
      events: [
        {
          name: 'arc200_Transfer',
          args: [
            { type: 'address', name: 'from' },
            { type: 'address', name: 'to' },
            { type: 'uint256', name: 'value' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'arc200_transferFrom',
      args: [
        { type: 'address', name: 'from', desc: 'The source of the transfer' },
        { type: 'address', name: 'to', desc: 'The destination of the transfer' },
        { type: 'uint256', name: 'value', desc: 'Amount of tokens to transfer' },
      ],
      returns: { type: 'bool', desc: 'Success' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      desc: 'Transfers tokens from source to destination as approved spender',
      events: [
        {
          name: 'arc200_Approval',
          args: [
            { type: 'address', name: 'owner' },
            { type: 'address', name: 'spender' },
            { type: 'uint256', name: 'value' },
          ],
        },
        {
          name: 'arc200_Transfer',
          args: [
            { type: 'address', name: 'from' },
            { type: 'address', name: 'to' },
            { type: 'uint256', name: 'value' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'arc200_approve',
      args: [
        { type: 'address', name: 'spender', desc: "Who is allowed to take tokens on owner's behalf" },
        { type: 'uint256', name: 'value', desc: 'Amount of tokens to be taken by spender' },
      ],
      returns: { type: 'bool', desc: 'Success' },
      actions: { create: [], call: ['NoOp'] },
      readonly: false,
      desc: 'Approve spender for a token',
      events: [
        {
          name: 'arc200_Approval',
          args: [
            { type: 'address', name: 'owner' },
            { type: 'address', name: 'spender' },
            { type: 'uint256', name: 'value' },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: 'arc200_allowance',
      args: [
        { type: 'address', name: 'owner', desc: "Owner's account" },
        { type: 'address', name: 'spender', desc: "Who is allowed to take tokens on owner's behalf" },
      ],
      returns: { type: 'uint256', desc: 'The remaining allowance' },
      actions: { create: [], call: ['NoOp'] },
      readonly: true,
      desc: 'Returns the current allowance of the spender of the tokens of the owner',
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  desc: 'Smart Contract Token Base Interface',
  networks: {},
  state: {
    schema: { global: { ints: 0, bytes: 4 }, local: { ints: 0, bytes: 0 } },
    keys: {
      global: {
        name: { keyType: 'AVMString', valueType: 'byte[]', key: 'bg==', desc: 'Name of the asset. Max 32 bytes' },
        symbol: { keyType: 'AVMString', valueType: 'byte[]', key: 'cw==', desc: 'Symbol of the asset. Max 8 bytes' },
        decimals: {
          keyType: 'AVMString',
          valueType: 'uint8',
          key: 'ZA==',
          desc: 'Decimals of the asset. Recommended is 6 decimal places.',
        },
        totalSupply: { keyType: 'AVMString', valueType: 'uint256', key: 'dA==', desc: 'Minted supply' },
      },
      local: {},
      box: {},
    },
    maps: {
      global: {},
      local: {},
      box: {
        balances: { keyType: 'address', valueType: 'uint256', prefix: 'Yg==' },
        approvals: { keyType: 'byte[32]', valueType: 'ApprovalStruct', prefix: 'YQ==' },
      },
    },
  },
  bareActions: { create: ['NoOp'], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        { pc: [589, 706], errorMessage: 'Box must have value' },
        { pc: [707], errorMessage: 'Index access is out of bounds' },
        { pc: [610], errorMessage: 'Insufficient balance at the sender account' },
        { pc: [369], errorMessage: 'Name of the asset must be longer or equal to 1 character' },
        { pc: [372], errorMessage: 'Name of the asset must be shorter or equal to 32 characters' },
        { pc: [145, 167, 189, 214, 236, 255, 271, 287, 303, 319], errorMessage: 'OnCompletion is not NoOp' },
        { pc: [363], errorMessage: 'Only deployer of this smart contract can call bootstrap method' },
        { pc: [378], errorMessage: 'Symbol of the asset must be longer or equal to 1 character' },
        { pc: [381], errorMessage: 'Symbol of the asset must be shorter or equal to 8 characters' },
        { pc: [388], errorMessage: 'This method can be called only once' },
        { pc: [352], errorMessage: 'can only call when creating' },
        { pc: [148, 170, 192, 217, 239, 258, 274, 290, 306, 322], errorMessage: 'can only call when not creating' },
        { pc: [439, 454, 469, 474], errorMessage: 'check GlobalState exists' },
        { pc: [514], errorMessage: 'insufficient approval' },
        { pc: [447, 462, 675], errorMessage: 'invalid size' },
        { pc: [522, 628], errorMessage: 'overflow' },
      ],
      pcOffsetMethod: 'none',
    },
    clear: { sourceInfo: [], pcOffsetMethod: 'none' },
  },
  source: {
    approval:
      '',
    clear:
      'I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==',
  },
  byteCode: {
    approval:
      'CiAEAQAgCCYGBBUffHUBYgF0AYAEeYPDXCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEbQQEZggoEl1OC4gRlfRPsBLauGiUEhOwT1QTsmWBBBILlc8QE2nAluQRKlo+PBLVCISUEu7MZ8zYaAI4KALAAoACQAIAAcABdAEcALgAYAAIjQzEZFEQxGEQ2GgE2GgKIAY8oTFCwIkMxGRREMRhENhoBNhoCiAFsKExQsCJDMRkURDEYRDYaATYaAjYaA4gBJShMULAiQzEZFEQxGEQ2GgE2GgKIAQIoTFCwIkMxGRREMRhENhoBiADmKExQsCJDMRkURDEYRIgA0ShMULAiQzEZFEQxGESIALooTFCwIkMxGRREMRhEiACbKExQsCJDMRkURDEYRIgAfChMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgSIABEoTFCwIkMxGUD/LzEYFEQiQ4oEATEAMgkSRIv8I1lJRCQORIv9I1lJRCUORCMqZUUBFESAAW6L/GeAAXOL/Wcqi/9ngAFki/5nMQApSwFQi/+/MgNMUIv/UCcETFCwK4kjgAFuZURXAgBJFSQSRIkjgAFzZURXAgBJFSUSRIkjgAFkZUSJIyplRImKAQGL/4gAVImKAgExAIv+i/+IAF+JigMBMQCL/UsBiACnSYv/p0SL/6FJFSQORCSvq4v9TgKIALNIi/2L/ov/iAAxiYoCATEAi/6L/4gAnImKAgGL/ov/iABuiYoBASmL/1BJvUUBQAAEJwVMiYsAvkRMiYoDAYv9iP/gSYv+iP/aTIv/p0SL/Yv+E0EAGosAi/+hSRUkDkQkr6spi/1QTL8pi/5QiwG/i/2L/lCL/1AnBExQsCuMAImKAgGL/ov/UAFJFSQSRImKAgGL/ov/iP/ngAFhTFBJvUUBQAAEJwVMiYsAvkRXACBMiYoDAYv9i/6I/8SL/4v9UIv+UIABYU8CUEy/i/2L/lCL/1CABBlp+GVMULAriQ==',
    clear: 'CoEBQw==',
  },
  compilerInfo: { compiler: 'puya', compilerVersion: { major: 4, minor: 7, patch: 0 } },
  events: [
    {
      name: 'arc200_Transfer',
      args: [
        { type: 'address', name: 'from' },
        { type: 'address', name: 'to' },
        { type: 'uint256', name: 'value' },
      ],
    },
    {
      name: 'arc200_Approval',
      args: [
        { type: 'address', name: 'owner' },
        { type: 'address', name: 'spender' },
        { type: 'uint256', name: 'value' },
      ],
    },
  ],
  templateVariables: {},
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never;

// Type definitions for ARC-56 structs

export type ApprovalStruct = {
  approvalAmount: bigint;
  owner: string;
  spender: string;
};

/**
 * Converts the ABI tuple representation of a ApprovalStruct to the struct representation
 */
export function ApprovalStructFromTuple(abiTuple: [bigint, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ApprovalStruct, APP_SPEC.structs) as ApprovalStruct;
}

/**
 * The argument types for the Arc200 contract
 */
export type Arc200Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap(byte[],byte[],uint8,uint256)bool': {
      name: Uint8Array;
      symbol: Uint8Array;
      decimals: bigint | number;
      totalSupply: bigint | number;
    };
    'arc200_name()byte[32]': Record<string, never>;
    'arc200_symbol()byte[8]': Record<string, never>;
    'arc200_decimals()uint8': Record<string, never>;
    'arc200_totalSupply()uint256': Record<string, never>;
    'arc200_balanceOf(address)uint256': {
      /**
       * The address of the owner of the token
       */
      owner: string;
    };
    'arc200_transfer(address,uint256)bool': {
      /**
       * The destination of the transfer
       */
      to: string;
      /**
       * Amount of tokens to transfer
       */
      value: bigint | number;
    };
    'arc200_transferFrom(address,address,uint256)bool': {
      /**
       * The source of the transfer
       */
      from: string;
      /**
       * The destination of the transfer
       */
      to: string;
      /**
       * Amount of tokens to transfer
       */
      value: bigint | number;
    };
    'arc200_approve(address,uint256)bool': {
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string;
      /**
       * Amount of tokens to be taken by spender
       */
      value: bigint | number;
    };
    'arc200_allowance(address,address)uint256': {
      /**
       * Owner's account
       */
      owner: string;
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string;
    };
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap(byte[],byte[],uint8,uint256)bool': [
      name: Uint8Array,
      symbol: Uint8Array,
      decimals: bigint | number,
      totalSupply: bigint | number,
    ];
    'arc200_name()byte[32]': [];
    'arc200_symbol()byte[8]': [];
    'arc200_decimals()uint8': [];
    'arc200_totalSupply()uint256': [];
    'arc200_balanceOf(address)uint256': [owner: string];
    'arc200_transfer(address,uint256)bool': [to: string, value: bigint | number];
    'arc200_transferFrom(address,address,uint256)bool': [from: string, to: string, value: bigint | number];
    'arc200_approve(address,uint256)bool': [spender: string, value: bigint | number];
    'arc200_allowance(address,address)uint256': [owner: string, spender: string];
  };
};

/**
 * The return type for each method
 */
export type Arc200Returns = {
  'bootstrap(byte[],byte[],uint8,uint256)bool': boolean;
  'arc200_name()byte[32]': Uint8Array;
  'arc200_symbol()byte[8]': Uint8Array;
  'arc200_decimals()uint8': number;
  'arc200_totalSupply()uint256': bigint;
  'arc200_balanceOf(address)uint256': bigint;
  'arc200_transfer(address,uint256)bool': boolean;
  'arc200_transferFrom(address,address,uint256)bool': boolean;
  'arc200_approve(address,uint256)bool': boolean;
  'arc200_allowance(address,address)uint256': bigint;
};

/**
 * Defines the types of available calls and state of the Arc200 smart contract.
 */
export type Arc200Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'bootstrap(byte[],byte[],uint8,uint256)bool' | 'bootstrap',
    {
      argsObj: Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'];
      argsTuple: Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool'];
      returns: Arc200Returns['bootstrap(byte[],byte[],uint8,uint256)bool'];
    }
  > &
    Record<
      'arc200_name()byte[32]' | 'arc200_name',
      {
        argsObj: Arc200Args['obj']['arc200_name()byte[32]'];
        argsTuple: Arc200Args['tuple']['arc200_name()byte[32]'];
        /**
         * The name of the token
         */
        returns: Arc200Returns['arc200_name()byte[32]'];
      }
    > &
    Record<
      'arc200_symbol()byte[8]' | 'arc200_symbol',
      {
        argsObj: Arc200Args['obj']['arc200_symbol()byte[8]'];
        argsTuple: Arc200Args['tuple']['arc200_symbol()byte[8]'];
        /**
         * The symbol of the token
         */
        returns: Arc200Returns['arc200_symbol()byte[8]'];
      }
    > &
    Record<
      'arc200_decimals()uint8' | 'arc200_decimals',
      {
        argsObj: Arc200Args['obj']['arc200_decimals()uint8'];
        argsTuple: Arc200Args['tuple']['arc200_decimals()uint8'];
        /**
         * The decimals of the token
         */
        returns: Arc200Returns['arc200_decimals()uint8'];
      }
    > &
    Record<
      'arc200_totalSupply()uint256' | 'arc200_totalSupply',
      {
        argsObj: Arc200Args['obj']['arc200_totalSupply()uint256'];
        argsTuple: Arc200Args['tuple']['arc200_totalSupply()uint256'];
        /**
         * The total supply of the token
         */
        returns: Arc200Returns['arc200_totalSupply()uint256'];
      }
    > &
    Record<
      'arc200_balanceOf(address)uint256' | 'arc200_balanceOf',
      {
        argsObj: Arc200Args['obj']['arc200_balanceOf(address)uint256'];
        argsTuple: Arc200Args['tuple']['arc200_balanceOf(address)uint256'];
        /**
         * The current balance of the holder of the token
         */
        returns: Arc200Returns['arc200_balanceOf(address)uint256'];
      }
    > &
    Record<
      'arc200_transfer(address,uint256)bool' | 'arc200_transfer',
      {
        argsObj: Arc200Args['obj']['arc200_transfer(address,uint256)bool'];
        argsTuple: Arc200Args['tuple']['arc200_transfer(address,uint256)bool'];
        /**
         * Success
         */
        returns: Arc200Returns['arc200_transfer(address,uint256)bool'];
      }
    > &
    Record<
      'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom',
      {
        argsObj: Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'];
        argsTuple: Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool'];
        /**
         * Success
         */
        returns: Arc200Returns['arc200_transferFrom(address,address,uint256)bool'];
      }
    > &
    Record<
      'arc200_approve(address,uint256)bool' | 'arc200_approve',
      {
        argsObj: Arc200Args['obj']['arc200_approve(address,uint256)bool'];
        argsTuple: Arc200Args['tuple']['arc200_approve(address,uint256)bool'];
        /**
         * Success
         */
        returns: Arc200Returns['arc200_approve(address,uint256)bool'];
      }
    > &
    Record<
      'arc200_allowance(address,address)uint256' | 'arc200_allowance',
      {
        argsObj: Arc200Args['obj']['arc200_allowance(address,address)uint256'];
        argsTuple: Arc200Args['tuple']['arc200_allowance(address,address)uint256'];
        /**
         * The remaining allowance
         */
        returns: Arc200Returns['arc200_allowance(address,address)uint256'];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Name of the asset. Max 32 bytes
         */
        name: Uint8Array;
        /**
         * Symbol of the asset. Max 8 bytes
         */
        symbol: Uint8Array;
        /**
         * Decimals of the asset. Recommended is 6 decimal places.
         */
        decimals: number;
        /**
         * Minted supply
         */
        totalSupply: bigint;
      };
      maps: {};
    };
    box: {
      keys: {};
      maps: {
        balances: Map<string, bigint>;
        approvals: Map<Uint8Array, ApprovalStruct>;
      };
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type Arc200Signatures = keyof Arc200Types['methods'];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc200NonVoidMethodSignatures = keyof Arc200Types['methods'] extends infer T
  ? T extends keyof Arc200Types['methods']
    ? MethodReturn<T> extends void
      ? never
      : T
    : never
  : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the Arc200 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc200Signatures> = Arc200Types['methods'][TSignature][
  | 'argsObj'
  | 'argsTuple'];
/**
 * Maps a method signature from the Arc200 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc200Signatures> = Arc200Types['methods'][TSignature]['returns'];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc200Types['state']['global']['keys'];

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc200Types['state']['box']['keys'];

/**
 * Defines supported create method params for this smart contract
 */
export type Arc200CreateCallParams = Expand<
  AppClientBareCallParams & { method?: never } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
>;
/**
 * Defines arguments required for the deploy method.
 */
export type Arc200DeployParams = Expand<
  Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: Arc200CreateCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc200 smart contract
 */
export abstract class Arc200ParamsFactory {
  /**
   * Constructs a no op call for the bootstrap(byte[],byte[],uint8,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(
    params: CallParams<
      | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
      | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(byte[],byte[],uint8,uint256)bool' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply],
    };
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * Returns the name of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Name(
    params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_name()byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * Returns the symbol of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Symbol(
    params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_symbol()byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * Returns the decimals of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Decimals(
    params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_decimals()uint8' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * Returns the total supply of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TotalSupply(
    params: CallParams<
      Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_totalSupply()uint256' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * Returns the current balance of the owner of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200BalanceOf(
    params: CallParams<
      Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_balanceOf(address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner],
    };
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * Transfers tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Transfer(
    params: CallParams<
      | Arc200Args['obj']['arc200_transfer(address,uint256)bool']
      | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transfer(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.value],
    };
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TransferFrom(
    params: CallParams<
      | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
      | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.value],
    };
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * Approve spender for a token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Approve(
    params: CallParams<
      | Arc200Args['obj']['arc200_approve(address,uint256)bool']
      | Arc200Args['tuple']['arc200_approve(address,uint256)bool']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_approve(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.value],
    };
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Allowance(
    params: CallParams<
      | Arc200Args['obj']['arc200_allowance(address,address)uint256']
      | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_allowance(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the Arc200 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc200Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `Arc200Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc200Client(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {
    return new Arc200Client(await this.appFactory.getAppClientByCreatorAndName(params));
  }

  /**
   * Idempotently deploys the Arc200 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc200DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    });
    return { result: result.result, appClient: new Arc200Client(result.appClient) };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc200 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (
        params?: Expand<
          AppClientBareCallParams &
            AppClientCompilationParams &
            CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
        >
      ) => {
        return this.appFactory.params.bare.create(params);
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc200 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (
        params?: Expand<
          AppClientBareCallParams &
            AppClientCompilationParams &
            CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
        >
      ) => {
        return this.appFactory.createTransaction.bare.create(params);
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc200 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (
        params?: Expand<
          AppClientBareCallParams &
            AppClientCompilationParams &
            CreateSchema &
            SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
        >
      ) => {
        const result = await this.appFactory.send.bare.create(params);
        return { result: result.result, appClient: new Arc200Client(result.appClient) };
      },
    },
  };
}
/**
 * A client to make calls to the Arc200 smart contract
 */
export class Arc200Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `Arc200Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc200 app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `Arc200Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>);
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc200NonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `Arc200Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>
  ): Promise<Arc200Client> {
    return new Arc200Client(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }));
  }

  /**
   * Returns an `Arc200Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<Arc200Client> {
    return new Arc200Client(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }));
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Arc200 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the Arc200 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (
      params: CallParams<
        | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
        | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.bootstrap(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The name of the token
     */
    arc200Name: (
      params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Name(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The symbol of the token
     */
    arc200Symbol: (
      params: CallParams<
        Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Symbol(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The decimals of the token
     */
    arc200Decimals: (
      params: CallParams<
        Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Decimals(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The total supply of the token
     */
    arc200TotalSupply: (
      params: CallParams<
        Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200TotalSupply(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current balance of the holder of the token
     */
    arc200BalanceOf: (
      params: CallParams<
        Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200BalanceOf(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * Transfers tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200Transfer: (
      params: CallParams<
        | Arc200Args['obj']['arc200_transfer(address,uint256)bool']
        | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Transfer(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200TransferFrom: (
      params: CallParams<
        | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
        | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200TransferFrom(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200Approve: (
      params: CallParams<
        | Arc200Args['obj']['arc200_approve(address,uint256)bool']
        | Arc200Args['tuple']['arc200_approve(address,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Approve(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call params: The remaining allowance
     */
    arc200Allowance: (
      params: CallParams<
        | Arc200Args['obj']['arc200_allowance(address,address)uint256']
        | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Allowance(params));
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Arc200 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the Arc200 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (
      params: CallParams<
        | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
        | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.bootstrap(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The name of the token
     */
    arc200Name: (
      params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Name(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The symbol of the token
     */
    arc200Symbol: (
      params: CallParams<
        Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Symbol(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The decimals of the token
     */
    arc200Decimals: (
      params: CallParams<
        Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Decimals(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The total supply of the token
     */
    arc200TotalSupply: (
      params: CallParams<
        Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200TotalSupply(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current balance of the holder of the token
     */
    arc200BalanceOf: (
      params: CallParams<
        Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200BalanceOf(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * Transfers tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200Transfer: (
      params: CallParams<
        | Arc200Args['obj']['arc200_transfer(address,uint256)bool']
        | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Transfer(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200TransferFrom: (
      params: CallParams<
        | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
        | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200TransferFrom(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200Approve: (
      params: CallParams<
        | Arc200Args['obj']['arc200_approve(address,uint256)bool']
        | Arc200Args['tuple']['arc200_approve(address,uint256)bool']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Approve(params));
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The remaining allowance
     */
    arc200Allowance: (
      params: CallParams<
        | Arc200Args['obj']['arc200_allowance(address,address)uint256']
        | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Allowance(params));
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Arc200 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the Arc200 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (
      params: CallParams<
        | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
        | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.bootstrap(params));
      return {
        ...result,
        return: result.return as unknown as undefined | Arc200Returns['bootstrap(byte[],byte[],uint8,uint256)bool'],
      };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The name of the token
     */
    arc200Name: async (
      params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Name(params));
      return { ...result, return: result.return as unknown as undefined | Arc200Returns['arc200_name()byte[32]'] };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The symbol of the token
     */
    arc200Symbol: async (
      params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Symbol(params));
      return { ...result, return: result.return as unknown as undefined | Arc200Returns['arc200_symbol()byte[8]'] };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The decimals of the token
     */
    arc200Decimals: async (
      params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Decimals(params));
      return { ...result, return: result.return as unknown as undefined | Arc200Returns['arc200_decimals()uint8'] };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The total supply of the token
     */
    arc200TotalSupply: async (
      params: CallParams<
        Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TotalSupply(params));
      return {
        ...result,
        return: result.return as unknown as undefined | Arc200Returns['arc200_totalSupply()uint256'],
      };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current balance of the holder of the token
     */
    arc200BalanceOf: async (
      params: CallParams<
        Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200BalanceOf(params));
      return {
        ...result,
        return: result.return as unknown as undefined | Arc200Returns['arc200_balanceOf(address)uint256'],
      };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * Transfers tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200Transfer: async (
      params: CallParams<
        | Arc200Args['obj']['arc200_transfer(address,uint256)bool']
        | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Transfer(params));
      return {
        ...result,
        return: result.return as unknown as undefined | Arc200Returns['arc200_transfer(address,uint256)bool'],
      };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200TransferFrom: async (
      params: CallParams<
        | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
        | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TransferFrom(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | Arc200Returns['arc200_transferFrom(address,address,uint256)bool'],
      };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200Approve: async (
      params: CallParams<
        | Arc200Args['obj']['arc200_approve(address,uint256)bool']
        | Arc200Args['tuple']['arc200_approve(address,uint256)bool']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Approve(params));
      return {
        ...result,
        return: result.return as unknown as undefined | Arc200Returns['arc200_approve(address,uint256)bool'],
      };
    },

    /**
     * Makes a call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call result: The remaining allowance
     */
    arc200Allowance: async (
      params: CallParams<
        | Arc200Args['obj']['arc200_allowance(address,address)uint256']
        | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Allowance(params));
      return {
        ...result,
        return: result.return as unknown as undefined | Arc200Returns['arc200_allowance(address,address)uint256'],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc200Client(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the name of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The name of the token
   */
  async arc200Name(
    params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> = {
      args: [],
    }
  ) {
    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Name(params));
    return result.return as unknown as Arc200Returns['arc200_name()byte[32]'];
  }

  /**
   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the symbol of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The symbol of the token
   */
  async arc200Symbol(
    params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> = {
      args: [],
    }
  ) {
    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Symbol(params));
    return result.return as unknown as Arc200Returns['arc200_symbol()byte[8]'];
  }

  /**
   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the decimals of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The decimals of the token
   */
  async arc200Decimals(
    params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> = {
      args: [],
    }
  ) {
    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Decimals(params));
    return result.return as unknown as Arc200Returns['arc200_decimals()uint8'];
  }

  /**
   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the total supply of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The total supply of the token
   */
  async arc200TotalSupply(
    params: CallParams<
      Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TotalSupply(params));
    return result.return as unknown as Arc200Returns['arc200_totalSupply()uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current balance of the owner of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current balance of the holder of the token
   */
  async arc200BalanceOf(
    params: CallParams<
      Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
    >
  ) {
    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200BalanceOf(params));
    return result.return as unknown as Arc200Returns['arc200_balanceOf(address)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params The params for the smart contract call
   * @returns The call result: The remaining allowance
   */
  async arc200Allowance(
    params: CallParams<
      | Arc200Args['obj']['arc200_allowance(address,address)uint256']
      | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
    >
  ) {
    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Allowance(params));
    return result.return as unknown as Arc200Returns['arc200_allowance(address,address)uint256'];
  }

  /**
   * Methods to access state for the current Arc200 app
   */
  state = {
    /**
     * Methods to access global state for the current Arc200 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          name: result.name,
          symbol: result.symbol,
          decimals: result.decimals,
          totalSupply: result.totalSupply,
        };
      },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<Uint8Array | undefined> => {
        return (await this.appClient.state.global.getValue('name')) as Uint8Array | undefined;
      },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<Uint8Array | undefined> => {
        return (await this.appClient.state.global.getValue('symbol')) as Uint8Array | undefined;
      },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<number | undefined> => {
        return (await this.appClient.state.global.getValue('decimals')) as number | undefined;
      },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('totalSupply')) as bigint | undefined;
      },
    },
    /**
     * Methods to access box state for the current Arc200 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll();
        return {};
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => {
          return (await this.appClient.state.box.getMap('balances')) as Map<string, bigint>;
        },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => {
          return (await this.appClient.state.box.getMapValue('balances', key)) as bigint | undefined;
        },
      },
      /**
       * Get values from the approvals map in box state
       */
      approvals: {
        /**
         * Get all current values of the approvals map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, ApprovalStruct>> => {
          return (await this.appClient.state.box.getMap('approvals')) as Map<Uint8Array, ApprovalStruct>;
        },
        /**
         * Get a current value of the approvals map by key from box state
         */
        value: async (key: Uint8Array): Promise<ApprovalStruct | undefined> => {
          return (await this.appClient.state.box.getMapValue('approvals', key)) as ApprovalStruct | undefined;
        },
      },
    },
  };

  public newGroup(): Arc200Composer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = [];
    return {
      /**
       * Add a bootstrap(byte[],byte[],uint8,uint256)bool method call against the Arc200 contract
       */
      bootstrap(
        params: CallParams<
          | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
          | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.bootstrap(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(byte[],byte[],uint8,uint256)bool', v));
        return this;
      },
      /**
       * Add a arc200_name()byte[32] method call against the Arc200 contract
       */
      arc200Name(
        params: CallParams<
          Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200Name(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v));
        return this;
      },
      /**
       * Add a arc200_symbol()byte[8] method call against the Arc200 contract
       */
      arc200Symbol(
        params: CallParams<
          Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200Symbol(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v));
        return this;
      },
      /**
       * Add a arc200_decimals()uint8 method call against the Arc200 contract
       */
      arc200Decimals(
        params: CallParams<
          Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200Decimals(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v));
        return this;
      },
      /**
       * Add a arc200_totalSupply()uint256 method call against the Arc200 contract
       */
      arc200TotalSupply(
        params: CallParams<
          Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v));
        return this;
      },
      /**
       * Add a arc200_balanceOf(address)uint256 method call against the Arc200 contract
       */
      arc200BalanceOf(
        params: CallParams<
          | Arc200Args['obj']['arc200_balanceOf(address)uint256']
          | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v));
        return this;
      },
      /**
       * Add a arc200_transfer(address,uint256)bool method call against the Arc200 contract
       */
      arc200Transfer(
        params: CallParams<
          | Arc200Args['obj']['arc200_transfer(address,uint256)bool']
          | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200Transfer(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v));
        return this;
      },
      /**
       * Add a arc200_transferFrom(address,address,uint256)bool method call against the Arc200 contract
       */
      arc200TransferFrom(
        params: CallParams<
          | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
          | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v));
        return this;
      },
      /**
       * Add a arc200_approve(address,uint256)bool method call against the Arc200 contract
       */
      arc200Approve(
        params: CallParams<
          | Arc200Args['obj']['arc200_approve(address,uint256)bool']
          | Arc200Args['tuple']['arc200_approve(address,uint256)bool']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200Approve(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v));
        return this;
      },
      /**
       * Add a arc200_allowance(address,address)uint256 method call against the Arc200 contract
       */
      arc200Allowance(
        params: CallParams<
          | Arc200Args['obj']['arc200_allowance(address,address)uint256']
          | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.arc200Allowance(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v));
        return this;
      },
      /**
       * Add a clear state call to the Arc200 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)));
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer));
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options ? composer.simulate() : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
    } as unknown as Arc200Composer;
  }
}
export type Arc200Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(byte[],byte[],uint8,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    params?: CallParams<
      | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
      | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['bootstrap(byte[],byte[],uint8,uint256)bool'] | undefined]>;

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * Returns the name of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(
    params?: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']>
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_name()byte[32]'] | undefined]>;

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(
    params?: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']>
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_symbol()byte[8]'] | undefined]>;

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(
    params?: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']>
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_decimals()uint8'] | undefined]>;

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(
    params?: CallParams<
      Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_totalSupply()uint256'] | undefined]>;

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(
    params?: CallParams<
      Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_balanceOf(address)uint256'] | undefined]>;

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * Transfers tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(
    params?: CallParams<
      | Arc200Args['obj']['arc200_transfer(address,uint256)bool']
      | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_transfer(address,uint256)bool'] | undefined]>;

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(
    params?: CallParams<
      | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
      | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>;

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * Approve spender for a token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(
    params?: CallParams<
      | Arc200Args['obj']['arc200_approve(address,uint256)bool']
      | Arc200Args['tuple']['arc200_approve(address,uint256)bool']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_approve(address,uint256)bool'] | undefined]>;

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(
    params?: CallParams<
      | Arc200Args['obj']['arc200_allowance(address,address)uint256']
      | Arc200Args['tuple']['arc200_allowance(address,address)uint256']
    >
  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_allowance(address,address)uint256'] | undefined]>;

  /**
   * Makes a clear_state call to an existing instance of the Arc200 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc200Composer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc200Composer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: RawSimulateOptions
  ): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc200ComposerResults<TReturns>>;
};
export type Arc200ComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
