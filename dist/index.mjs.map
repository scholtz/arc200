{"version":3,"sources":["../contracts/artifacts/Arc200Client.ts","../src/getArc200Client.ts"],"sourcesContent":["/* eslint-disable */\n/**\n * This file was automatically generated by @algorandfoundation/algokit-client-generator.\n * DO NOT MODIFY IT BY HAND.\n * requires: @algorandfoundation/algokit-utils: ^7\n */\nimport { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client';\nimport { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app';\nimport {\n  Arc56Contract,\n  getArc56ReturnValue,\n  getABIStructFromABITuple,\n} from '@algorandfoundation/algokit-utils/types/app-arc56';\nimport {\n  AppClient as _AppClient,\n  AppClientMethodCallParams,\n  AppClientParams,\n  AppClientBareCallParams,\n  CallOnComplete,\n  AppClientCompilationParams,\n  ResolveAppClientByCreatorAndName,\n  ResolveAppClientByNetwork,\n  CloneAppClientParams,\n} from '@algorandfoundation/algokit-utils/types/app-client';\nimport {\n  AppFactory as _AppFactory,\n  AppFactoryAppClientParams,\n  AppFactoryResolveAppClientByCreatorAndNameParams,\n  AppFactoryDeployParams,\n  AppFactoryParams,\n  CreateSchema,\n} from '@algorandfoundation/algokit-utils/types/app-factory';\nimport {\n  TransactionComposer,\n  AppCallMethodCall,\n  AppMethodCallTransactionArgument,\n  SimulateOptions,\n  RawSimulateOptions,\n  SkipSignaturesSimulateOptions,\n} from '@algorandfoundation/algokit-utils/types/composer';\nimport {\n  SendParams,\n  SendSingleTransactionResult,\n  SendAtomicTransactionComposerResults,\n} from '@algorandfoundation/algokit-utils/types/transaction';\nimport { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk';\n\nexport const APP_SPEC: Arc56Contract = {\n  name: 'Arc200',\n  structs: {\n    ApprovalStruct: [\n      { name: 'approvalAmount', type: 'uint256' },\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n    ],\n  },\n  methods: [\n    {\n      name: 'bootstrap',\n      args: [\n        { type: 'byte[]', name: 'name' },\n        { type: 'byte[]', name: 'symbol' },\n        { type: 'uint8', name: 'decimals' },\n        { type: 'uint256', name: 'totalSupply' },\n      ],\n      returns: { type: 'bool' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: false,\n      events: [\n        {\n          name: 'arc200_Transfer',\n          args: [\n            { type: 'address', name: 'from' },\n            { type: 'address', name: 'to' },\n            { type: 'uint256', name: 'value' },\n          ],\n        },\n      ],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_name',\n      args: [],\n      returns: { type: 'byte[32]', desc: 'The name of the token' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: true,\n      desc: 'Returns the name of the token',\n      events: [],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_symbol',\n      args: [],\n      returns: { type: 'byte[8]', desc: 'The symbol of the token' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: true,\n      desc: 'Returns the symbol of the token',\n      events: [],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_decimals',\n      args: [],\n      returns: { type: 'uint8', desc: 'The decimals of the token' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: true,\n      desc: 'Returns the decimals of the token',\n      events: [],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_totalSupply',\n      args: [],\n      returns: { type: 'uint256', desc: 'The total supply of the token' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: true,\n      desc: 'Returns the total supply of the token',\n      events: [],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_balanceOf',\n      args: [{ type: 'address', name: 'owner', desc: 'The address of the owner of the token' }],\n      returns: { type: 'uint256', desc: 'The current balance of the holder of the token' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: true,\n      desc: 'Returns the current balance of the owner of the token',\n      events: [],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_transfer',\n      args: [\n        { type: 'address', name: 'to', desc: 'The destination of the transfer' },\n        { type: 'uint256', name: 'value', desc: 'Amount of tokens to transfer' },\n      ],\n      returns: { type: 'bool', desc: 'Success' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: false,\n      desc: 'Transfers tokens',\n      events: [\n        {\n          name: 'arc200_Transfer',\n          args: [\n            { type: 'address', name: 'from' },\n            { type: 'address', name: 'to' },\n            { type: 'uint256', name: 'value' },\n          ],\n        },\n      ],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_transferFrom',\n      args: [\n        { type: 'address', name: 'from', desc: 'The source of the transfer' },\n        { type: 'address', name: 'to', desc: 'The destination of the transfer' },\n        { type: 'uint256', name: 'value', desc: 'Amount of tokens to transfer' },\n      ],\n      returns: { type: 'bool', desc: 'Success' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: false,\n      desc: 'Transfers tokens from source to destination as approved spender',\n      events: [\n        {\n          name: 'arc200_Approval',\n          args: [\n            { type: 'address', name: 'owner' },\n            { type: 'address', name: 'spender' },\n            { type: 'uint256', name: 'value' },\n          ],\n        },\n        {\n          name: 'arc200_Transfer',\n          args: [\n            { type: 'address', name: 'from' },\n            { type: 'address', name: 'to' },\n            { type: 'uint256', name: 'value' },\n          ],\n        },\n      ],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_approve',\n      args: [\n        { type: 'address', name: 'spender', desc: \"Who is allowed to take tokens on owner's behalf\" },\n        { type: 'uint256', name: 'value', desc: 'Amount of tokens to be taken by spender' },\n      ],\n      returns: { type: 'bool', desc: 'Success' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: false,\n      desc: 'Approve spender for a token',\n      events: [\n        {\n          name: 'arc200_Approval',\n          args: [\n            { type: 'address', name: 'owner' },\n            { type: 'address', name: 'spender' },\n            { type: 'uint256', name: 'value' },\n          ],\n        },\n      ],\n      recommendations: {},\n    },\n    {\n      name: 'arc200_allowance',\n      args: [\n        { type: 'address', name: 'owner', desc: \"Owner's account\" },\n        { type: 'address', name: 'spender', desc: \"Who is allowed to take tokens on owner's behalf\" },\n      ],\n      returns: { type: 'uint256', desc: 'The remaining allowance' },\n      actions: { create: [], call: ['NoOp'] },\n      readonly: true,\n      desc: 'Returns the current allowance of the spender of the tokens of the owner',\n      events: [],\n      recommendations: {},\n    },\n  ],\n  arcs: [22, 28],\n  desc: 'Smart Contract Token Base Interface',\n  networks: {},\n  state: {\n    schema: { global: { ints: 0, bytes: 4 }, local: { ints: 0, bytes: 0 } },\n    keys: {\n      global: {\n        name: { keyType: 'AVMString', valueType: 'byte[]', key: 'bg==', desc: 'Name of the asset. Max 32 bytes' },\n        symbol: { keyType: 'AVMString', valueType: 'byte[]', key: 'cw==', desc: 'Symbol of the asset. Max 8 bytes' },\n        decimals: {\n          keyType: 'AVMString',\n          valueType: 'uint8',\n          key: 'ZA==',\n          desc: 'Decimals of the asset. Recommended is 6 decimal places.',\n        },\n        totalSupply: { keyType: 'AVMString', valueType: 'uint256', key: 'dA==', desc: 'Minted supply' },\n      },\n      local: {},\n      box: {},\n    },\n    maps: {\n      global: {},\n      local: {},\n      box: {\n        balances: { keyType: 'address', valueType: 'uint256', prefix: 'Yg==' },\n        approvals: { keyType: 'byte[32]', valueType: 'ApprovalStruct', prefix: 'YQ==' },\n      },\n    },\n  },\n  bareActions: { create: ['NoOp'], call: [] },\n  sourceInfo: {\n    approval: {\n      sourceInfo: [\n        { pc: [589, 706], errorMessage: 'Box must have value' },\n        { pc: [707], errorMessage: 'Index access is out of bounds' },\n        { pc: [610], errorMessage: 'Insufficient balance at the sender account' },\n        { pc: [369], errorMessage: 'Name of the asset must be longer or equal to 1 character' },\n        { pc: [372], errorMessage: 'Name of the asset must be shorter or equal to 32 characters' },\n        { pc: [145, 167, 189, 214, 236, 255, 271, 287, 303, 319], errorMessage: 'OnCompletion is not NoOp' },\n        { pc: [363], errorMessage: 'Only deployer of this smart contract can call bootstrap method' },\n        { pc: [378], errorMessage: 'Symbol of the asset must be longer or equal to 1 character' },\n        { pc: [381], errorMessage: 'Symbol of the asset must be shorter or equal to 8 characters' },\n        { pc: [388], errorMessage: 'This method can be called only once' },\n        { pc: [352], errorMessage: 'can only call when creating' },\n        { pc: [148, 170, 192, 217, 239, 258, 274, 290, 306, 322], errorMessage: 'can only call when not creating' },\n        { pc: [439, 454, 469, 474], errorMessage: 'check GlobalState exists' },\n        { pc: [514], errorMessage: 'insufficient approval' },\n        { pc: [447, 462, 675], errorMessage: 'invalid size' },\n        { pc: [522, 628], errorMessage: 'overflow' },\n      ],\n      pcOffsetMethod: 'none',\n    },\n    clear: { sourceInfo: [], pcOffsetMethod: 'none' },\n  },\n  source: {\n    approval:\n      '',\n    clear:\n      'I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==',\n  },\n  byteCode: {\n    approval:\n      'CiAEAQAgCCYGBBUffHUBYgF0AYAEeYPDXCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEbQQEZggoEl1OC4gRlfRPsBLauGiUEhOwT1QTsmWBBBILlc8QE2nAluQRKlo+PBLVCISUEu7MZ8zYaAI4KALAAoACQAIAAcABdAEcALgAYAAIjQzEZFEQxGEQ2GgE2GgKIAY8oTFCwIkMxGRREMRhENhoBNhoCiAFsKExQsCJDMRkURDEYRDYaATYaAjYaA4gBJShMULAiQzEZFEQxGEQ2GgE2GgKIAQIoTFCwIkMxGRREMRhENhoBiADmKExQsCJDMRkURDEYRIgA0ShMULAiQzEZFEQxGESIALooTFCwIkMxGRREMRhEiACbKExQsCJDMRkURDEYRIgAfChMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgSIABEoTFCwIkMxGUD/LzEYFEQiQ4oEATEAMgkSRIv8I1lJRCQORIv9I1lJRCUORCMqZUUBFESAAW6L/GeAAXOL/Wcqi/9ngAFki/5nMQApSwFQi/+/MgNMUIv/UCcETFCwK4kjgAFuZURXAgBJFSQSRIkjgAFzZURXAgBJFSUSRIkjgAFkZUSJIyplRImKAQGL/4gAVImKAgExAIv+i/+IAF+JigMBMQCL/UsBiACnSYv/p0SL/6FJFSQORCSvq4v9TgKIALNIi/2L/ov/iAAxiYoCATEAi/6L/4gAnImKAgGL/ov/iABuiYoBASmL/1BJvUUBQAAEJwVMiYsAvkRMiYoDAYv9iP/gSYv+iP/aTIv/p0SL/Yv+E0EAGosAi/+hSRUkDkQkr6spi/1QTL8pi/5QiwG/i/2L/lCL/1AnBExQsCuMAImKAgGL/ov/UAFJFSQSRImKAgGL/ov/iP/ngAFhTFBJvUUBQAAEJwVMiYsAvkRXACBMiYoDAYv9i/6I/8SL/4v9UIv+UIABYU8CUEy/i/2L/lCL/1CABBlp+GVMULAriQ==',\n    clear: 'CoEBQw==',\n  },\n  compilerInfo: { compiler: 'puya', compilerVersion: { major: 4, minor: 7, patch: 0 } },\n  events: [\n    {\n      name: 'arc200_Transfer',\n      args: [\n        { type: 'address', name: 'from' },\n        { type: 'address', name: 'to' },\n        { type: 'uint256', name: 'value' },\n      ],\n    },\n    {\n      name: 'arc200_Approval',\n      args: [\n        { type: 'address', name: 'owner' },\n        { type: 'address', name: 'spender' },\n        { type: 'uint256', name: 'value' },\n      ],\n    },\n  ],\n  templateVariables: {},\n} as unknown as Arc56Contract;\n\n/**\n * A state record containing binary data\n */\nexport interface BinaryState {\n  /**\n   * Gets the state value as a Uint8Array\n   */\n  asByteArray(): Uint8Array | undefined;\n  /**\n   * Gets the state value as a string\n   */\n  asString(): string | undefined;\n}\n\nclass BinaryStateValue implements BinaryState {\n  constructor(private value: Uint8Array | undefined) {}\n\n  asByteArray(): Uint8Array | undefined {\n    return this.value;\n  }\n\n  asString(): string | undefined {\n    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined;\n  }\n}\n\n/**\n * Expands types for IntelliSense so they are more human readable\n * See https://stackoverflow.com/a/69288824\n */\nexport type Expand<T> = T extends (...args: infer A) => infer R\n  ? (...args: Expand<A>) => Expand<R>\n  : T extends infer O\n    ? { [K in keyof O]: O[K] }\n    : never;\n\n// Type definitions for ARC-56 structs\n\nexport type ApprovalStruct = {\n  approvalAmount: bigint;\n  owner: string;\n  spender: string;\n};\n\n/**\n * Converts the ABI tuple representation of a ApprovalStruct to the struct representation\n */\nexport function ApprovalStructFromTuple(abiTuple: [bigint, string, string]) {\n  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ApprovalStruct, APP_SPEC.structs) as ApprovalStruct;\n}\n\n/**\n * The argument types for the Arc200 contract\n */\nexport type Arc200Args = {\n  /**\n   * The object representation of the arguments for each method\n   */\n  obj: {\n    'bootstrap(byte[],byte[],uint8,uint256)bool': {\n      name: Uint8Array;\n      symbol: Uint8Array;\n      decimals: bigint | number;\n      totalSupply: bigint | number;\n    };\n    'arc200_name()byte[32]': Record<string, never>;\n    'arc200_symbol()byte[8]': Record<string, never>;\n    'arc200_decimals()uint8': Record<string, never>;\n    'arc200_totalSupply()uint256': Record<string, never>;\n    'arc200_balanceOf(address)uint256': {\n      /**\n       * The address of the owner of the token\n       */\n      owner: string;\n    };\n    'arc200_transfer(address,uint256)bool': {\n      /**\n       * The destination of the transfer\n       */\n      to: string;\n      /**\n       * Amount of tokens to transfer\n       */\n      value: bigint | number;\n    };\n    'arc200_transferFrom(address,address,uint256)bool': {\n      /**\n       * The source of the transfer\n       */\n      from: string;\n      /**\n       * The destination of the transfer\n       */\n      to: string;\n      /**\n       * Amount of tokens to transfer\n       */\n      value: bigint | number;\n    };\n    'arc200_approve(address,uint256)bool': {\n      /**\n       * Who is allowed to take tokens on owner's behalf\n       */\n      spender: string;\n      /**\n       * Amount of tokens to be taken by spender\n       */\n      value: bigint | number;\n    };\n    'arc200_allowance(address,address)uint256': {\n      /**\n       * Owner's account\n       */\n      owner: string;\n      /**\n       * Who is allowed to take tokens on owner's behalf\n       */\n      spender: string;\n    };\n  };\n  /**\n   * The tuple representation of the arguments for each method\n   */\n  tuple: {\n    'bootstrap(byte[],byte[],uint8,uint256)bool': [\n      name: Uint8Array,\n      symbol: Uint8Array,\n      decimals: bigint | number,\n      totalSupply: bigint | number,\n    ];\n    'arc200_name()byte[32]': [];\n    'arc200_symbol()byte[8]': [];\n    'arc200_decimals()uint8': [];\n    'arc200_totalSupply()uint256': [];\n    'arc200_balanceOf(address)uint256': [owner: string];\n    'arc200_transfer(address,uint256)bool': [to: string, value: bigint | number];\n    'arc200_transferFrom(address,address,uint256)bool': [from: string, to: string, value: bigint | number];\n    'arc200_approve(address,uint256)bool': [spender: string, value: bigint | number];\n    'arc200_allowance(address,address)uint256': [owner: string, spender: string];\n  };\n};\n\n/**\n * The return type for each method\n */\nexport type Arc200Returns = {\n  'bootstrap(byte[],byte[],uint8,uint256)bool': boolean;\n  'arc200_name()byte[32]': Uint8Array;\n  'arc200_symbol()byte[8]': Uint8Array;\n  'arc200_decimals()uint8': number;\n  'arc200_totalSupply()uint256': bigint;\n  'arc200_balanceOf(address)uint256': bigint;\n  'arc200_transfer(address,uint256)bool': boolean;\n  'arc200_transferFrom(address,address,uint256)bool': boolean;\n  'arc200_approve(address,uint256)bool': boolean;\n  'arc200_allowance(address,address)uint256': bigint;\n};\n\n/**\n * Defines the types of available calls and state of the Arc200 smart contract.\n */\nexport type Arc200Types = {\n  /**\n   * Maps method signatures / names to their argument and return types.\n   */\n  methods: Record<\n    'bootstrap(byte[],byte[],uint8,uint256)bool' | 'bootstrap',\n    {\n      argsObj: Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'];\n      argsTuple: Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool'];\n      returns: Arc200Returns['bootstrap(byte[],byte[],uint8,uint256)bool'];\n    }\n  > &\n    Record<\n      'arc200_name()byte[32]' | 'arc200_name',\n      {\n        argsObj: Arc200Args['obj']['arc200_name()byte[32]'];\n        argsTuple: Arc200Args['tuple']['arc200_name()byte[32]'];\n        /**\n         * The name of the token\n         */\n        returns: Arc200Returns['arc200_name()byte[32]'];\n      }\n    > &\n    Record<\n      'arc200_symbol()byte[8]' | 'arc200_symbol',\n      {\n        argsObj: Arc200Args['obj']['arc200_symbol()byte[8]'];\n        argsTuple: Arc200Args['tuple']['arc200_symbol()byte[8]'];\n        /**\n         * The symbol of the token\n         */\n        returns: Arc200Returns['arc200_symbol()byte[8]'];\n      }\n    > &\n    Record<\n      'arc200_decimals()uint8' | 'arc200_decimals',\n      {\n        argsObj: Arc200Args['obj']['arc200_decimals()uint8'];\n        argsTuple: Arc200Args['tuple']['arc200_decimals()uint8'];\n        /**\n         * The decimals of the token\n         */\n        returns: Arc200Returns['arc200_decimals()uint8'];\n      }\n    > &\n    Record<\n      'arc200_totalSupply()uint256' | 'arc200_totalSupply',\n      {\n        argsObj: Arc200Args['obj']['arc200_totalSupply()uint256'];\n        argsTuple: Arc200Args['tuple']['arc200_totalSupply()uint256'];\n        /**\n         * The total supply of the token\n         */\n        returns: Arc200Returns['arc200_totalSupply()uint256'];\n      }\n    > &\n    Record<\n      'arc200_balanceOf(address)uint256' | 'arc200_balanceOf',\n      {\n        argsObj: Arc200Args['obj']['arc200_balanceOf(address)uint256'];\n        argsTuple: Arc200Args['tuple']['arc200_balanceOf(address)uint256'];\n        /**\n         * The current balance of the holder of the token\n         */\n        returns: Arc200Returns['arc200_balanceOf(address)uint256'];\n      }\n    > &\n    Record<\n      'arc200_transfer(address,uint256)bool' | 'arc200_transfer',\n      {\n        argsObj: Arc200Args['obj']['arc200_transfer(address,uint256)bool'];\n        argsTuple: Arc200Args['tuple']['arc200_transfer(address,uint256)bool'];\n        /**\n         * Success\n         */\n        returns: Arc200Returns['arc200_transfer(address,uint256)bool'];\n      }\n    > &\n    Record<\n      'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom',\n      {\n        argsObj: Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'];\n        argsTuple: Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool'];\n        /**\n         * Success\n         */\n        returns: Arc200Returns['arc200_transferFrom(address,address,uint256)bool'];\n      }\n    > &\n    Record<\n      'arc200_approve(address,uint256)bool' | 'arc200_approve',\n      {\n        argsObj: Arc200Args['obj']['arc200_approve(address,uint256)bool'];\n        argsTuple: Arc200Args['tuple']['arc200_approve(address,uint256)bool'];\n        /**\n         * Success\n         */\n        returns: Arc200Returns['arc200_approve(address,uint256)bool'];\n      }\n    > &\n    Record<\n      'arc200_allowance(address,address)uint256' | 'arc200_allowance',\n      {\n        argsObj: Arc200Args['obj']['arc200_allowance(address,address)uint256'];\n        argsTuple: Arc200Args['tuple']['arc200_allowance(address,address)uint256'];\n        /**\n         * The remaining allowance\n         */\n        returns: Arc200Returns['arc200_allowance(address,address)uint256'];\n      }\n    >;\n  /**\n   * Defines the shape of the state of the application.\n   */\n  state: {\n    global: {\n      keys: {\n        /**\n         * Name of the asset. Max 32 bytes\n         */\n        name: Uint8Array;\n        /**\n         * Symbol of the asset. Max 8 bytes\n         */\n        symbol: Uint8Array;\n        /**\n         * Decimals of the asset. Recommended is 6 decimal places.\n         */\n        decimals: number;\n        /**\n         * Minted supply\n         */\n        totalSupply: bigint;\n      };\n      maps: {};\n    };\n    box: {\n      keys: {};\n      maps: {\n        balances: Map<string, bigint>;\n        approvals: Map<Uint8Array, ApprovalStruct>;\n      };\n    };\n  };\n};\n\n/**\n * Defines the possible abi call signatures.\n */\nexport type Arc200Signatures = keyof Arc200Types['methods'];\n/**\n * Defines the possible abi call signatures for methods that return a non-void value.\n */\nexport type Arc200NonVoidMethodSignatures = keyof Arc200Types['methods'] extends infer T\n  ? T extends keyof Arc200Types['methods']\n    ? MethodReturn<T> extends void\n      ? never\n      : T\n    : never\n  : never;\n/**\n * Defines an object containing all relevant parameters for a single call to the contract.\n */\nexport type CallParams<TArgs> = Expand<\n  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {\n    /** The args for the ABI method call, either as an ordered array or an object */\n    args: Expand<TArgs>;\n  }\n>;\n/**\n * Maps a method signature from the Arc200 smart contract to the method's arguments in either tuple or struct form\n */\nexport type MethodArgs<TSignature extends Arc200Signatures> = Arc200Types['methods'][TSignature][\n  | 'argsObj'\n  | 'argsTuple'];\n/**\n * Maps a method signature from the Arc200 smart contract to the method's return type\n */\nexport type MethodReturn<TSignature extends Arc200Signatures> = Arc200Types['methods'][TSignature]['returns'];\n\n/**\n * Defines the shape of the keyed global state of the application.\n */\nexport type GlobalKeysState = Arc200Types['state']['global']['keys'];\n\n/**\n * Defines the shape of the keyed box state of the application.\n */\nexport type BoxKeysState = Arc200Types['state']['box']['keys'];\n\n/**\n * Defines supported create method params for this smart contract\n */\nexport type Arc200CreateCallParams = Expand<\n  AppClientBareCallParams & { method?: never } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema\n>;\n/**\n * Defines arguments required for the deploy method.\n */\nexport type Arc200DeployParams = Expand<\n  Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {\n    /**\n     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)\n     */\n    createParams?: Arc200CreateCallParams;\n  }\n>;\n\n/**\n * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc200 smart contract\n */\nexport abstract class Arc200ParamsFactory {\n  /**\n   * Constructs a no op call for the bootstrap(byte[],byte[],uint8,uint256)bool ABI method\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static bootstrap(\n    params: CallParams<\n      | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']\n      | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'bootstrap(byte[],byte[],uint8,uint256)bool' as const,\n      args: Array.isArray(params.args)\n        ? params.args\n        : [params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_name()byte[32] ABI method\n   *\n   * Returns the name of the token\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200Name(\n    params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_name()byte[32]' as const,\n      args: Array.isArray(params.args) ? params.args : [],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_symbol()byte[8] ABI method\n   *\n   * Returns the symbol of the token\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200Symbol(\n    params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_symbol()byte[8]' as const,\n      args: Array.isArray(params.args) ? params.args : [],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_decimals()uint8 ABI method\n   *\n   * Returns the decimals of the token\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200Decimals(\n    params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_decimals()uint8' as const,\n      args: Array.isArray(params.args) ? params.args : [],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method\n   *\n   * Returns the total supply of the token\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200TotalSupply(\n    params: CallParams<\n      Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_totalSupply()uint256' as const,\n      args: Array.isArray(params.args) ? params.args : [],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method\n   *\n   * Returns the current balance of the owner of the token\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200BalanceOf(\n    params: CallParams<\n      Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_balanceOf(address)uint256' as const,\n      args: Array.isArray(params.args) ? params.args : [params.args.owner],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method\n   *\n   * Transfers tokens\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200Transfer(\n    params: CallParams<\n      | Arc200Args['obj']['arc200_transfer(address,uint256)bool']\n      | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_transfer(address,uint256)bool' as const,\n      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.value],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method\n   *\n   * Transfers tokens from source to destination as approved spender\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200TransferFrom(\n    params: CallParams<\n      | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']\n      | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_transferFrom(address,address,uint256)bool' as const,\n      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.value],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method\n   *\n   * Approve spender for a token\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200Approve(\n    params: CallParams<\n      | Arc200Args['obj']['arc200_approve(address,uint256)bool']\n      | Arc200Args['tuple']['arc200_approve(address,uint256)bool']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_approve(address,uint256)bool' as const,\n      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.value],\n    };\n  }\n  /**\n   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method\n   *\n   * Returns the current allowance of the spender of the tokens of the owner\n   *\n   * @param params Parameters for the call\n   * @returns An `AppClientMethodCallParams` object for the call\n   */\n  static arc200Allowance(\n    params: CallParams<\n      | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n      | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n    > &\n      CallOnComplete\n  ): AppClientMethodCallParams & CallOnComplete {\n    return {\n      ...params,\n      method: 'arc200_allowance(address,address)uint256' as const,\n      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],\n    };\n  }\n}\n\n/**\n * A factory to create and deploy one or more instance of the Arc200 smart contract and to create one or more app clients to interact with those (or other) app instances\n */\nexport class Arc200Factory {\n  /**\n   * The underlying `AppFactory` for when you want to have more flexibility\n   */\n  public readonly appFactory: _AppFactory;\n\n  /**\n   * Creates a new instance of `Arc200Factory`\n   *\n   * @param params The parameters to initialise the app factory with\n   */\n  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {\n    this.appFactory = new _AppFactory({\n      ...params,\n      appSpec: APP_SPEC,\n    });\n  }\n\n  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */\n  public get appName() {\n    return this.appFactory.appName;\n  }\n\n  /** The ARC-56 app spec being used */\n  get appSpec() {\n    return APP_SPEC;\n  }\n\n  /** A reference to the underlying `AlgorandClient` this app factory is using. */\n  public get algorand(): AlgorandClient {\n    return this.appFactory.algorand;\n  }\n\n  /**\n   * Returns a new `AppClient` client for an app instance of the given ID.\n   *\n   * Automatically populates appName, defaultSender and source maps from the factory\n   * if not specified in the params.\n   * @param params The parameters to create the app client\n   * @returns The `AppClient`\n   */\n  public getAppClientById(params: AppFactoryAppClientParams) {\n    return new Arc200Client(this.appFactory.getAppClientById(params));\n  }\n\n  /**\n   * Returns a new `AppClient` client, resolving the app by creator address and name\n   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).\n   *\n   * Automatically populates appName, defaultSender and source maps from the factory\n   * if not specified in the params.\n   * @param params The parameters to create the app client\n   * @returns The `AppClient`\n   */\n  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {\n    return new Arc200Client(await this.appFactory.getAppClientByCreatorAndName(params));\n  }\n\n  /**\n   * Idempotently deploys the Arc200 smart contract.\n   *\n   * @param params The arguments for the contract calls and any additional parameters for the call\n   * @returns The deployment result\n   */\n  public async deploy(params: Arc200DeployParams = {}) {\n    const result = await this.appFactory.deploy({\n      ...params,\n    });\n    return { result: result.result, appClient: new Arc200Client(result.appClient) };\n  }\n\n  /**\n   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.\n   */\n  readonly params = {\n    /**\n     * Gets available create methods\n     */\n    create: {\n      /**\n       * Creates a new instance of the Arc200 smart contract using a bare call.\n       *\n       * @param params The params for the bare (raw) call\n       * @returns The params for a create call\n       */\n      bare: (\n        params?: Expand<\n          AppClientBareCallParams &\n            AppClientCompilationParams &\n            CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }\n        >\n      ) => {\n        return this.appFactory.params.bare.create(params);\n      },\n    },\n  };\n\n  /**\n   * Create transactions for the current app\n   */\n  readonly createTransaction = {\n    /**\n     * Gets available create methods\n     */\n    create: {\n      /**\n       * Creates a new instance of the Arc200 smart contract using a bare call.\n       *\n       * @param params The params for the bare (raw) call\n       * @returns The transaction for a create call\n       */\n      bare: (\n        params?: Expand<\n          AppClientBareCallParams &\n            AppClientCompilationParams &\n            CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }\n        >\n      ) => {\n        return this.appFactory.createTransaction.bare.create(params);\n      },\n    },\n  };\n\n  /**\n   * Send calls to the current app\n   */\n  readonly send = {\n    /**\n     * Gets available create methods\n     */\n    create: {\n      /**\n       * Creates a new instance of the Arc200 smart contract using a bare call.\n       *\n       * @param params The params for the bare (raw) call\n       * @returns The create result\n       */\n      bare: async (\n        params?: Expand<\n          AppClientBareCallParams &\n            AppClientCompilationParams &\n            CreateSchema &\n            SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n        >\n      ) => {\n        const result = await this.appFactory.send.bare.create(params);\n        return { result: result.result, appClient: new Arc200Client(result.appClient) };\n      },\n    },\n  };\n}\n/**\n * A client to make calls to the Arc200 smart contract\n */\nexport class Arc200Client {\n  /**\n   * The underlying `AppClient` for when you want to have more flexibility\n   */\n  public readonly appClient: _AppClient;\n\n  /**\n   * Creates a new instance of `Arc200Client`\n   *\n   * @param appClient An `AppClient` instance which has been created with the Arc200 app spec\n   */\n  constructor(appClient: _AppClient);\n  /**\n   * Creates a new instance of `Arc200Client`\n   *\n   * @param params The parameters to initialise the app client with\n   */\n  constructor(params: Omit<AppClientParams, 'appSpec'>);\n  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {\n    this.appClient =\n      appClientOrParams instanceof _AppClient\n        ? appClientOrParams\n        : new _AppClient({\n            ...appClientOrParams,\n            appSpec: APP_SPEC,\n          });\n  }\n\n  /**\n   * Checks for decode errors on the given return value and maps the return value to the return type for the given method\n   * @returns The typed return value or undefined if there was no value\n   */\n  decodeReturnValue<TSignature extends Arc200NonVoidMethodSignatures>(\n    method: TSignature,\n    returnValue: ABIReturn | undefined\n  ) {\n    return returnValue !== undefined\n      ? getArc56ReturnValue<MethodReturn<TSignature>>(\n          returnValue,\n          this.appClient.getABIMethod(method),\n          APP_SPEC.structs\n        )\n      : undefined;\n  }\n\n  /**\n   * Returns a new `Arc200Client` client, resolving the app by creator address and name\n   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).\n   * @param params The parameters to create the app client\n   */\n  public static async fromCreatorAndName(\n    params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>\n  ): Promise<Arc200Client> {\n    return new Arc200Client(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }));\n  }\n\n  /**\n   * Returns an `Arc200Client` instance for the current network based on\n   * pre-determined network-specific app IDs specified in the ARC-56 app spec.\n   *\n   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.\n   * @param params The parameters to create the app client\n   */\n  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<Arc200Client> {\n    return new Arc200Client(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }));\n  }\n\n  /** The ID of the app instance this client is linked to. */\n  public get appId() {\n    return this.appClient.appId;\n  }\n\n  /** The app address of the app instance this client is linked to. */\n  public get appAddress() {\n    return this.appClient.appAddress;\n  }\n\n  /** The name of the app. */\n  public get appName() {\n    return this.appClient.appName;\n  }\n\n  /** The ARC-56 app spec being used */\n  public get appSpec() {\n    return this.appClient.appSpec;\n  }\n\n  /** A reference to the underlying `AlgorandClient` this app client is using. */\n  public get algorand(): AlgorandClient {\n    return this.appClient.algorand;\n  }\n\n  /**\n   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.\n   */\n  readonly params = {\n    /**\n     * Makes a clear_state call to an existing instance of the Arc200 smart contract.\n     *\n     * @param params The params for the bare (raw) call\n     * @returns The clearState result\n     */\n    clearState: (params?: Expand<AppClientBareCallParams>) => {\n      return this.appClient.params.bare.clearState(params);\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params\n     */\n    bootstrap: (\n      params: CallParams<\n        | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']\n        | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.bootstrap(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the name of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: The name of the token\n     */\n    arc200Name: (\n      params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {\n        onComplete?: OnApplicationComplete.NoOpOC;\n      } = { args: [] }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200Name(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the symbol of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: The symbol of the token\n     */\n    arc200Symbol: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']\n      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200Symbol(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the decimals of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: The decimals of the token\n     */\n    arc200Decimals: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']\n      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200Decimals(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the total supply of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: The total supply of the token\n     */\n    arc200TotalSupply: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200TotalSupply(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the current balance of the owner of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: The current balance of the holder of the token\n     */\n    arc200BalanceOf: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200BalanceOf(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.\n     *\n     * Transfers tokens\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: Success\n     */\n    arc200Transfer: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_transfer(address,uint256)bool']\n        | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200Transfer(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.\n     *\n     * Transfers tokens from source to destination as approved spender\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: Success\n     */\n    arc200TransferFrom: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']\n        | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200TransferFrom(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.\n     *\n     * Approve spender for a token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: Success\n     */\n    arc200Approve: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_approve(address,uint256)bool']\n        | Arc200Args['tuple']['arc200_approve(address,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200Approve(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the current allowance of the spender of the tokens of the owner\n     *\n     * @param params The params for the smart contract call\n     * @returns The call params: The remaining allowance\n     */\n    arc200Allowance: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n        | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.params.call(Arc200ParamsFactory.arc200Allowance(params));\n    },\n  };\n\n  /**\n   * Create transactions for the current app\n   */\n  readonly createTransaction = {\n    /**\n     * Makes a clear_state call to an existing instance of the Arc200 smart contract.\n     *\n     * @param params The params for the bare (raw) call\n     * @returns The clearState result\n     */\n    clearState: (params?: Expand<AppClientBareCallParams>) => {\n      return this.appClient.createTransaction.bare.clearState(params);\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction\n     */\n    bootstrap: (\n      params: CallParams<\n        | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']\n        | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.bootstrap(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the name of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: The name of the token\n     */\n    arc200Name: (\n      params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {\n        onComplete?: OnApplicationComplete.NoOpOC;\n      } = { args: [] }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Name(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the symbol of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: The symbol of the token\n     */\n    arc200Symbol: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']\n      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Symbol(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the decimals of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: The decimals of the token\n     */\n    arc200Decimals: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']\n      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Decimals(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the total supply of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: The total supply of the token\n     */\n    arc200TotalSupply: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200TotalSupply(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the current balance of the owner of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: The current balance of the holder of the token\n     */\n    arc200BalanceOf: (\n      params: CallParams<\n        Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200BalanceOf(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.\n     *\n     * Transfers tokens\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: Success\n     */\n    arc200Transfer: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_transfer(address,uint256)bool']\n        | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Transfer(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.\n     *\n     * Transfers tokens from source to destination as approved spender\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: Success\n     */\n    arc200TransferFrom: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']\n        | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200TransferFrom(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.\n     *\n     * Approve spender for a token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: Success\n     */\n    arc200Approve: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_approve(address,uint256)bool']\n        | Arc200Args['tuple']['arc200_approve(address,uint256)bool']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Approve(params));\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the current allowance of the spender of the tokens of the owner\n     *\n     * @param params The params for the smart contract call\n     * @returns The call transaction: The remaining allowance\n     */\n    arc200Allowance: (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n        | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n      > & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Allowance(params));\n    },\n  };\n\n  /**\n   * Send calls to the current app\n   */\n  readonly send = {\n    /**\n     * Makes a clear_state call to an existing instance of the Arc200 smart contract.\n     *\n     * @param params The params for the bare (raw) call\n     * @returns The clearState result\n     */\n    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {\n      return this.appClient.send.bare.clearState(params);\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result\n     */\n    bootstrap: async (\n      params: CallParams<\n        | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']\n        | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.bootstrap(params));\n      return {\n        ...result,\n        return: result.return as unknown as undefined | Arc200Returns['bootstrap(byte[],byte[],uint8,uint256)bool'],\n      };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the name of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: The name of the token\n     */\n    arc200Name: async (\n      params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Name(params));\n      return { ...result, return: result.return as unknown as undefined | Arc200Returns['arc200_name()byte[32]'] };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the symbol of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: The symbol of the token\n     */\n    arc200Symbol: async (\n      params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Symbol(params));\n      return { ...result, return: result.return as unknown as undefined | Arc200Returns['arc200_symbol()byte[8]'] };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the decimals of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: The decimals of the token\n     */\n    arc200Decimals: async (\n      params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Decimals(params));\n      return { ...result, return: result.return as unknown as undefined | Arc200Returns['arc200_decimals()uint8'] };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the total supply of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: The total supply of the token\n     */\n    arc200TotalSupply: async (\n      params: CallParams<\n        Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TotalSupply(params));\n      return {\n        ...result,\n        return: result.return as unknown as undefined | Arc200Returns['arc200_totalSupply()uint256'],\n      };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the current balance of the owner of the token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: The current balance of the holder of the token\n     */\n    arc200BalanceOf: async (\n      params: CallParams<\n        Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200BalanceOf(params));\n      return {\n        ...result,\n        return: result.return as unknown as undefined | Arc200Returns['arc200_balanceOf(address)uint256'],\n      };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.\n     *\n     * Transfers tokens\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: Success\n     */\n    arc200Transfer: async (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_transfer(address,uint256)bool']\n        | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Transfer(params));\n      return {\n        ...result,\n        return: result.return as unknown as undefined | Arc200Returns['arc200_transfer(address,uint256)bool'],\n      };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.\n     *\n     * Transfers tokens from source to destination as approved spender\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: Success\n     */\n    arc200TransferFrom: async (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']\n        | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TransferFrom(params));\n      return {\n        ...result,\n        return: result.return as unknown as\n          | undefined\n          | Arc200Returns['arc200_transferFrom(address,address,uint256)bool'],\n      };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.\n     *\n     * Approve spender for a token\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: Success\n     */\n    arc200Approve: async (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_approve(address,uint256)bool']\n        | Arc200Args['tuple']['arc200_approve(address,uint256)bool']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Approve(params));\n      return {\n        ...result,\n        return: result.return as unknown as undefined | Arc200Returns['arc200_approve(address,uint256)bool'],\n      };\n    },\n\n    /**\n     * Makes a call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.\n     *\n     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n     *\n     * Returns the current allowance of the spender of the tokens of the owner\n     *\n     * @param params The params for the smart contract call\n     * @returns The call result: The remaining allowance\n     */\n    arc200Allowance: async (\n      params: CallParams<\n        | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n        | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n      > &\n        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }\n    ) => {\n      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Allowance(params));\n      return {\n        ...result,\n        return: result.return as unknown as undefined | Arc200Returns['arc200_allowance(address,address)uint256'],\n      };\n    },\n  };\n\n  /**\n   * Clone this app client with different params\n   *\n   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.\n   * @returns A new app client with the altered params\n   */\n  public clone(params: CloneAppClientParams) {\n    return new Arc200Client(this.appClient.clone(params));\n  }\n\n  /**\n   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_name()byte[32]` ABI method.\n   *\n   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n   *\n   * Returns the name of the token\n   *\n   * @param params The params for the smart contract call\n   * @returns The call result: The name of the token\n   */\n  async arc200Name(\n    params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> = {\n      args: [],\n    }\n  ) {\n    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Name(params));\n    return result.return as unknown as Arc200Returns['arc200_name()byte[32]'];\n  }\n\n  /**\n   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_symbol()byte[8]` ABI method.\n   *\n   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n   *\n   * Returns the symbol of the token\n   *\n   * @param params The params for the smart contract call\n   * @returns The call result: The symbol of the token\n   */\n  async arc200Symbol(\n    params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> = {\n      args: [],\n    }\n  ) {\n    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Symbol(params));\n    return result.return as unknown as Arc200Returns['arc200_symbol()byte[8]'];\n  }\n\n  /**\n   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_decimals()uint8` ABI method.\n   *\n   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n   *\n   * Returns the decimals of the token\n   *\n   * @param params The params for the smart contract call\n   * @returns The call result: The decimals of the token\n   */\n  async arc200Decimals(\n    params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> = {\n      args: [],\n    }\n  ) {\n    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Decimals(params));\n    return result.return as unknown as Arc200Returns['arc200_decimals()uint8'];\n  }\n\n  /**\n   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_totalSupply()uint256` ABI method.\n   *\n   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n   *\n   * Returns the total supply of the token\n   *\n   * @param params The params for the smart contract call\n   * @returns The call result: The total supply of the token\n   */\n  async arc200TotalSupply(\n    params: CallParams<\n      Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n    > = { args: [] }\n  ) {\n    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TotalSupply(params));\n    return result.return as unknown as Arc200Returns['arc200_totalSupply()uint256'];\n  }\n\n  /**\n   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.\n   *\n   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n   *\n   * Returns the current balance of the owner of the token\n   *\n   * @param params The params for the smart contract call\n   * @returns The call result: The current balance of the holder of the token\n   */\n  async arc200BalanceOf(\n    params: CallParams<\n      Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n    >\n  ) {\n    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200BalanceOf(params));\n    return result.return as unknown as Arc200Returns['arc200_balanceOf(address)uint256'];\n  }\n\n  /**\n   * Makes a readonly (simulated) call to the Arc200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.\n   *\n   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.\n   *\n   * Returns the current allowance of the spender of the tokens of the owner\n   *\n   * @param params The params for the smart contract call\n   * @returns The call result: The remaining allowance\n   */\n  async arc200Allowance(\n    params: CallParams<\n      | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n      | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n    >\n  ) {\n    const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Allowance(params));\n    return result.return as unknown as Arc200Returns['arc200_allowance(address,address)uint256'];\n  }\n\n  /**\n   * Methods to access state for the current Arc200 app\n   */\n  state = {\n    /**\n     * Methods to access global state for the current Arc200 app\n     */\n    global: {\n      /**\n       * Get all current keyed values from global state\n       */\n      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {\n        const result = await this.appClient.state.global.getAll();\n        return {\n          name: result.name,\n          symbol: result.symbol,\n          decimals: result.decimals,\n          totalSupply: result.totalSupply,\n        };\n      },\n      /**\n       * Get the current value of the name key in global state\n       */\n      name: async (): Promise<Uint8Array | undefined> => {\n        return (await this.appClient.state.global.getValue('name')) as Uint8Array | undefined;\n      },\n      /**\n       * Get the current value of the symbol key in global state\n       */\n      symbol: async (): Promise<Uint8Array | undefined> => {\n        return (await this.appClient.state.global.getValue('symbol')) as Uint8Array | undefined;\n      },\n      /**\n       * Get the current value of the decimals key in global state\n       */\n      decimals: async (): Promise<number | undefined> => {\n        return (await this.appClient.state.global.getValue('decimals')) as number | undefined;\n      },\n      /**\n       * Get the current value of the totalSupply key in global state\n       */\n      totalSupply: async (): Promise<bigint | undefined> => {\n        return (await this.appClient.state.global.getValue('totalSupply')) as bigint | undefined;\n      },\n    },\n    /**\n     * Methods to access box state for the current Arc200 app\n     */\n    box: {\n      /**\n       * Get all current keyed values from box state\n       */\n      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {\n        const result = await this.appClient.state.box.getAll();\n        return {};\n      },\n      /**\n       * Get values from the balances map in box state\n       */\n      balances: {\n        /**\n         * Get all current values of the balances map in box state\n         */\n        getMap: async (): Promise<Map<string, bigint>> => {\n          return (await this.appClient.state.box.getMap('balances')) as Map<string, bigint>;\n        },\n        /**\n         * Get a current value of the balances map by key from box state\n         */\n        value: async (key: string): Promise<bigint | undefined> => {\n          return (await this.appClient.state.box.getMapValue('balances', key)) as bigint | undefined;\n        },\n      },\n      /**\n       * Get values from the approvals map in box state\n       */\n      approvals: {\n        /**\n         * Get all current values of the approvals map in box state\n         */\n        getMap: async (): Promise<Map<Uint8Array, ApprovalStruct>> => {\n          return (await this.appClient.state.box.getMap('approvals')) as Map<Uint8Array, ApprovalStruct>;\n        },\n        /**\n         * Get a current value of the approvals map by key from box state\n         */\n        value: async (key: Uint8Array): Promise<ApprovalStruct | undefined> => {\n          return (await this.appClient.state.box.getMapValue('approvals', key)) as ApprovalStruct | undefined;\n        },\n      },\n    },\n  };\n\n  public newGroup(): Arc200Composer {\n    const client = this;\n    const composer = this.algorand.newGroup();\n    let promiseChain: Promise<unknown> = Promise.resolve();\n    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = [];\n    return {\n      /**\n       * Add a bootstrap(byte[],byte[],uint8,uint256)bool method call against the Arc200 contract\n       */\n      bootstrap(\n        params: CallParams<\n          | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']\n          | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.bootstrap(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('bootstrap(byte[],byte[],uint8,uint256)bool', v));\n        return this;\n      },\n      /**\n       * Add a arc200_name()byte[32] method call against the Arc200 contract\n       */\n      arc200Name(\n        params: CallParams<\n          Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200Name(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v));\n        return this;\n      },\n      /**\n       * Add a arc200_symbol()byte[8] method call against the Arc200 contract\n       */\n      arc200Symbol(\n        params: CallParams<\n          Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200Symbol(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v));\n        return this;\n      },\n      /**\n       * Add a arc200_decimals()uint8 method call against the Arc200 contract\n       */\n      arc200Decimals(\n        params: CallParams<\n          Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200Decimals(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v));\n        return this;\n      },\n      /**\n       * Add a arc200_totalSupply()uint256 method call against the Arc200 contract\n       */\n      arc200TotalSupply(\n        params: CallParams<\n          Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v));\n        return this;\n      },\n      /**\n       * Add a arc200_balanceOf(address)uint256 method call against the Arc200 contract\n       */\n      arc200BalanceOf(\n        params: CallParams<\n          | Arc200Args['obj']['arc200_balanceOf(address)uint256']\n          | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v));\n        return this;\n      },\n      /**\n       * Add a arc200_transfer(address,uint256)bool method call against the Arc200 contract\n       */\n      arc200Transfer(\n        params: CallParams<\n          | Arc200Args['obj']['arc200_transfer(address,uint256)bool']\n          | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200Transfer(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v));\n        return this;\n      },\n      /**\n       * Add a arc200_transferFrom(address,address,uint256)bool method call against the Arc200 contract\n       */\n      arc200TransferFrom(\n        params: CallParams<\n          | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']\n          | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v));\n        return this;\n      },\n      /**\n       * Add a arc200_approve(address,uint256)bool method call against the Arc200 contract\n       */\n      arc200Approve(\n        params: CallParams<\n          | Arc200Args['obj']['arc200_approve(address,uint256)bool']\n          | Arc200Args['tuple']['arc200_approve(address,uint256)bool']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200Approve(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v));\n        return this;\n      },\n      /**\n       * Add a arc200_allowance(address,address)uint256 method call against the Arc200 contract\n       */\n      arc200Allowance(\n        params: CallParams<\n          | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n          | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n        > & { onComplete?: OnApplicationComplete.NoOpOC }\n      ) {\n        promiseChain = promiseChain.then(async () =>\n          composer.addAppCallMethodCall(await client.params.arc200Allowance(params))\n        );\n        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v));\n        return this;\n      },\n      /**\n       * Add a clear state call to the Arc200 contract\n       */\n      clearState(params: AppClientBareCallParams) {\n        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)));\n        return this;\n      },\n      addTransaction(txn: Transaction, signer?: TransactionSigner) {\n        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer));\n        return this;\n      },\n      async composer() {\n        await promiseChain;\n        return composer;\n      },\n      async simulate(options?: SimulateOptions) {\n        await promiseChain;\n        const result = await (!options ? composer.simulate() : composer.simulate(options));\n        return {\n          ...result,\n          returns: result.returns?.map((val, i) =>\n            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue\n          ),\n        };\n      },\n      async send(params?: SendParams) {\n        await promiseChain;\n        const result = await composer.send(params);\n        return {\n          ...result,\n          returns: result.returns?.map((val, i) =>\n            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue\n          ),\n        };\n      },\n    } as unknown as Arc200Composer;\n  }\n}\nexport type Arc200Composer<TReturns extends [...any[]] = []> = {\n  /**\n   * Calls the bootstrap(byte[],byte[],uint8,uint256)bool ABI method.\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  bootstrap(\n    params?: CallParams<\n      | Arc200Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']\n      | Arc200Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['bootstrap(byte[],byte[],uint8,uint256)bool'] | undefined]>;\n\n  /**\n   * Calls the arc200_name()byte[32] ABI method.\n   *\n   * Returns the name of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Name(\n    params?: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']>\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_name()byte[32]'] | undefined]>;\n\n  /**\n   * Calls the arc200_symbol()byte[8] ABI method.\n   *\n   * Returns the symbol of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Symbol(\n    params?: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']>\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_symbol()byte[8]'] | undefined]>;\n\n  /**\n   * Calls the arc200_decimals()uint8 ABI method.\n   *\n   * Returns the decimals of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Decimals(\n    params?: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']>\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_decimals()uint8'] | undefined]>;\n\n  /**\n   * Calls the arc200_totalSupply()uint256 ABI method.\n   *\n   * Returns the total supply of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200TotalSupply(\n    params?: CallParams<\n      Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_totalSupply()uint256'] | undefined]>;\n\n  /**\n   * Calls the arc200_balanceOf(address)uint256 ABI method.\n   *\n   * Returns the current balance of the owner of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200BalanceOf(\n    params?: CallParams<\n      Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_balanceOf(address)uint256'] | undefined]>;\n\n  /**\n   * Calls the arc200_transfer(address,uint256)bool ABI method.\n   *\n   * Transfers tokens\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Transfer(\n    params?: CallParams<\n      | Arc200Args['obj']['arc200_transfer(address,uint256)bool']\n      | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_transfer(address,uint256)bool'] | undefined]>;\n\n  /**\n   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.\n   *\n   * Transfers tokens from source to destination as approved spender\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200TransferFrom(\n    params?: CallParams<\n      | Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']\n      | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>;\n\n  /**\n   * Calls the arc200_approve(address,uint256)bool ABI method.\n   *\n   * Approve spender for a token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Approve(\n    params?: CallParams<\n      | Arc200Args['obj']['arc200_approve(address,uint256)bool']\n      | Arc200Args['tuple']['arc200_approve(address,uint256)bool']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_approve(address,uint256)bool'] | undefined]>;\n\n  /**\n   * Calls the arc200_allowance(address,address)uint256 ABI method.\n   *\n   * Returns the current allowance of the spender of the tokens of the owner\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Allowance(\n    params?: CallParams<\n      | Arc200Args['obj']['arc200_allowance(address,address)uint256']\n      | Arc200Args['tuple']['arc200_allowance(address,address)uint256']\n    >\n  ): Arc200Composer<[...TReturns, Arc200Returns['arc200_allowance(address,address)uint256'] | undefined]>;\n\n  /**\n   * Makes a clear_state call to an existing instance of the Arc200 smart contract.\n   *\n   * @param args The arguments for the bare call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  clearState(params?: AppClientBareCallParams): Arc200Composer<[...TReturns, undefined]>;\n\n  /**\n   * Adds a transaction to the composer\n   *\n   * @param txn A transaction to add to the transaction group\n   * @param signer The optional signer to use when signing this transaction.\n   */\n  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc200Composer<TReturns>;\n  /**\n   * Returns the underlying AtomicTransactionComposer instance\n   */\n  composer(): Promise<TransactionComposer>;\n  /**\n   * Simulates the transaction group and returns the result\n   */\n  simulate(): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;\n  simulate(\n    options: SkipSignaturesSimulateOptions\n  ): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;\n  simulate(\n    options: RawSimulateOptions\n  ): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;\n  /**\n   * Sends the transaction group to the network and returns the results\n   */\n  send(params?: SendParams): Promise<Arc200ComposerResults<TReturns>>;\n};\nexport type Arc200ComposerResults<TReturns extends [...any[]]> = Expand<\n  SendAtomicTransactionComposerResults & {\n    returns: TReturns;\n  }\n>;\n","import { Address, Algodv2, ProgramSourceMap, TransactionSigner } from 'algosdk';\nimport { SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction';\nimport { Arc200Client } from '../contracts/artifacts/Arc200Client';\nimport { AppClient } from '@algorandfoundation/algokit-utils/types/app-client';\nimport { AlgorandClient } from '@algorandfoundation/algokit-utils';\n\ninterface IGetClientInput {\n  algorand: AlgorandClient;\n  appId: bigint;\n  appName: string | undefined;\n  approvalSourceMap: ProgramSourceMap | undefined;\n  clearSourceMap: ProgramSourceMap | undefined;\n  defaultSender: string | Address | undefined;\n  defaultSigner: TransactionSigner | undefined;\n}\n\nexport const getArc200Client = (input: IGetClientInput) => {\n  return new Arc200Client({\n    algorand: input.algorand,\n    appId: input.appId,\n    appName: input.appName,\n    approvalSourceMap: input.approvalSourceMap,\n    clearSourceMap: input.clearSourceMap,\n    defaultSender: input.defaultSender,\n    defaultSigner: input.defaultSigner,\n  });\n};\n"],"mappings":"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","names":[]}