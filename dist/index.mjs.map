{"version":3,"sources":["../contracts/clients/Arc200Client.ts","../src/getArc200Client.ts"],"sourcesContent":["/* eslint-disable */\n/**\n * This file was automatically generated by @algorandfoundation/algokit-client-generator.\n * DO NOT MODIFY IT BY HAND.\n * requires: @algorandfoundation/algokit-utils: ^2\n */\nimport * as algokit from '@algorandfoundation/algokit-utils'\nimport type {\n  ABIAppCallArg,\n  AppCallTransactionResult,\n  AppCallTransactionResultOfType,\n  AppCompilationResult,\n  AppReference,\n  AppState,\n  CoreAppCallArgs,\n  RawAppCallArgs,\n  TealTemplateParams,\n} from '@algorandfoundation/algokit-utils/types/app'\nimport type {\n  AppClientCallCoreParams,\n  AppClientCompilationParams,\n  AppClientDeployCoreParams,\n  AppDetails,\n  ApplicationClient,\n} from '@algorandfoundation/algokit-utils/types/app-client'\nimport type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'\nimport type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'\nimport type { ABIResult, TransactionWithSigner } from 'algosdk'\nimport { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'\nexport const APP_SPEC: AppSpec = {\n  \"hints\": {\n    \"arc200_name()string\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_symbol()string\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_decimals()uint8\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_totalSupply()uint256\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_balanceOf(address)uint256\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_transfer(address,uint256)bool\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_transferFrom(address,address,uint256)bool\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_approve(address,uint256)bool\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"arc200_allowance(address,address)uint256\": {\n      \"call_config\": {\n        \"no_op\": \"CALL\"\n      }\n    },\n    \"createApplication()void\": {\n      \"call_config\": {\n        \"no_op\": \"CREATE\"\n      }\n    }\n  },\n  \"bare_call_config\": {\n    \"no_op\": \"NEVER\",\n    \"opt_in\": \"NEVER\",\n    \"close_out\": \"NEVER\",\n    \"update_application\": \"NEVER\",\n    \"delete_application\": \"NEVER\"\n  },\n  \"schema\": {\n    \"local\": {\n      \"declared\": {},\n      \"reserved\": {}\n    },\n    \"global\": {\n      \"declared\": {},\n      \"reserved\": {}\n    }\n  },\n  \"state\": {\n    \"global\": {\n      \"num_byte_slices\": 0,\n      \"num_uints\": 0\n    },\n    \"local\": {\n      \"num_byte_slices\": 0,\n      \"num_uints\": 0\n    }\n  },\n  \"source\": {\n    \"approval\": \"\",\n    \"clear\": \"I3ByYWdtYSB2ZXJzaW9uIDEw\"\n  },\n  \"contract\": {\n    \"name\": \"Arc200\",\n    \"desc\": \"\",\n    \"methods\": [\n      {\n        \"name\": \"arc200_name\",\n        \"desc\": \"Returns the name of the token\",\n        \"readonly\": true,\n        \"args\": [],\n        \"returns\": {\n          \"type\": \"string\",\n          \"desc\": \"The name of the token\"\n        }\n      },\n      {\n        \"name\": \"arc200_symbol\",\n        \"desc\": \"Returns the symbol of the token\",\n        \"readonly\": true,\n        \"args\": [],\n        \"returns\": {\n          \"type\": \"string\",\n          \"desc\": \"The symbol of the token\"\n        }\n      },\n      {\n        \"name\": \"arc200_decimals\",\n        \"desc\": \"Returns the decimals of the token\",\n        \"readonly\": true,\n        \"args\": [],\n        \"returns\": {\n          \"type\": \"uint8\",\n          \"desc\": \"The decimals of the token\"\n        }\n      },\n      {\n        \"name\": \"arc200_totalSupply\",\n        \"desc\": \"Returns the total supply of the token\",\n        \"readonly\": true,\n        \"args\": [],\n        \"returns\": {\n          \"type\": \"uint256\",\n          \"desc\": \"The total supply of the token\"\n        }\n      },\n      {\n        \"name\": \"arc200_balanceOf\",\n        \"desc\": \"Returns the current balance of the owner of the token\",\n        \"readonly\": true,\n        \"args\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"address\",\n            \"desc\": \"The address of the owner of the token\"\n          }\n        ],\n        \"returns\": {\n          \"type\": \"uint256\",\n          \"desc\": \"The current balance of the holder of the token\"\n        }\n      },\n      {\n        \"name\": \"arc200_transfer\",\n        \"desc\": \"Transfers tokens\",\n        \"args\": [\n          {\n            \"name\": \"to\",\n            \"type\": \"address\",\n            \"desc\": \"The destination of the transfer\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"desc\": \"Amount of tokens to transfer\"\n          }\n        ],\n        \"returns\": {\n          \"type\": \"bool\",\n          \"desc\": \"Success\"\n        }\n      },\n      {\n        \"name\": \"arc200_transferFrom\",\n        \"desc\": \"Transfers tokens from source to destination as approved spender\",\n        \"args\": [\n          {\n            \"name\": \"from\",\n            \"type\": \"address\",\n            \"desc\": \"The source of the transfer\"\n          },\n          {\n            \"name\": \"to\",\n            \"type\": \"address\",\n            \"desc\": \"The destination of the transfer\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"desc\": \"Amount of tokens to transfer\"\n          }\n        ],\n        \"returns\": {\n          \"type\": \"bool\",\n          \"desc\": \"Success\"\n        }\n      },\n      {\n        \"name\": \"arc200_approve\",\n        \"desc\": \"Approve spender for a token\",\n        \"args\": [\n          {\n            \"name\": \"spender\",\n            \"type\": \"address\",\n            \"desc\": \"Who is allowed to take tokens on owner's behalf\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"desc\": \"Amount of tokens to be taken by spender\"\n          }\n        ],\n        \"returns\": {\n          \"type\": \"bool\",\n          \"desc\": \"Success\"\n        }\n      },\n      {\n        \"name\": \"arc200_allowance\",\n        \"desc\": \"Returns the current allowance of the spender of the tokens of the owner\",\n        \"readonly\": true,\n        \"args\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"address\",\n            \"desc\": \"Owner's account\"\n          },\n          {\n            \"name\": \"spender\",\n            \"type\": \"address\",\n            \"desc\": \"Who is allowed to take tokens on owner's behalf\"\n          }\n        ],\n        \"returns\": {\n          \"type\": \"uint256\",\n          \"desc\": \"The remaining allowance\"\n        }\n      },\n      {\n        \"name\": \"createApplication\",\n        \"args\": [],\n        \"returns\": {\n          \"type\": \"void\"\n        }\n      }\n    ]\n  }\n}\n\n/**\n * Defines an onCompletionAction of 'no_op'\n */\nexport type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }\n/**\n * Defines an onCompletionAction of 'opt_in'\n */\nexport type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }\n/**\n * Defines an onCompletionAction of 'close_out'\n */\nexport type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }\n/**\n * Defines an onCompletionAction of 'delete_application'\n */\nexport type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }\n/**\n * Defines an onCompletionAction of 'update_application'\n */\nexport type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }\n/**\n * A state record containing a single unsigned integer\n */\nexport type IntegerState = {\n  /**\n   * Gets the state value as a BigInt \n   */\n  asBigInt(): bigint\n  /**\n   * Gets the state value as a number.\n   */\n  asNumber(): number\n}\n/**\n * A state record containing binary data\n */\nexport type BinaryState = {\n  /**\n   * Gets the state value as a Uint8Array\n   */\n  asByteArray(): Uint8Array\n  /**\n   * Gets the state value as a string\n   */\n  asString(): string\n}\n\nexport type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference\nexport type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>\n\n/**\n * Defines the types of available calls and state of the Arc200 smart contract.\n */\nexport type Arc200 = {\n  /**\n   * Maps method signatures / names to their argument and return types.\n   */\n  methods:\n    & Record<'arc200_name()string' | 'arc200_name', {\n      argsObj: {\n      }\n      argsTuple: []\n      /**\n       * The name of the token\n       */\n      returns: string\n    }>\n    & Record<'arc200_symbol()string' | 'arc200_symbol', {\n      argsObj: {\n      }\n      argsTuple: []\n      /**\n       * The symbol of the token\n       */\n      returns: string\n    }>\n    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {\n      argsObj: {\n      }\n      argsTuple: []\n      /**\n       * The decimals of the token\n       */\n      returns: number\n    }>\n    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {\n      argsObj: {\n      }\n      argsTuple: []\n      /**\n       * The total supply of the token\n       */\n      returns: bigint\n    }>\n    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {\n      argsObj: {\n        /**\n         * The address of the owner of the token\n         */\n        owner: string\n      }\n      argsTuple: [owner: string]\n      /**\n       * The current balance of the holder of the token\n       */\n      returns: bigint\n    }>\n    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {\n      argsObj: {\n        /**\n         * The destination of the transfer\n         */\n        to: string\n        /**\n         * Amount of tokens to transfer\n         */\n        value: bigint | number\n      }\n      argsTuple: [to: string, value: bigint | number]\n      /**\n       * Success\n       */\n      returns: boolean\n    }>\n    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {\n      argsObj: {\n        /**\n         * The source of the transfer\n         */\n        from: string\n        /**\n         * The destination of the transfer\n         */\n        to: string\n        /**\n         * Amount of tokens to transfer\n         */\n        value: bigint | number\n      }\n      argsTuple: [from: string, to: string, value: bigint | number]\n      /**\n       * Success\n       */\n      returns: boolean\n    }>\n    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {\n      argsObj: {\n        /**\n         * Who is allowed to take tokens on owner's behalf\n         */\n        spender: string\n        /**\n         * Amount of tokens to be taken by spender\n         */\n        value: bigint | number\n      }\n      argsTuple: [spender: string, value: bigint | number]\n      /**\n       * Success\n       */\n      returns: boolean\n    }>\n    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {\n      argsObj: {\n        /**\n         * Owner's account\n         */\n        owner: string\n        /**\n         * Who is allowed to take tokens on owner's behalf\n         */\n        spender: string\n      }\n      argsTuple: [owner: string, spender: string]\n      /**\n       * The remaining allowance\n       */\n      returns: bigint\n    }>\n    & Record<'createApplication()void' | 'createApplication', {\n      argsObj: {\n      }\n      argsTuple: []\n      returns: void\n    }>\n}\n/**\n * Defines the possible abi call signatures\n */\nexport type Arc200Sig = keyof Arc200['methods']\n/**\n * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made\n */\nexport type TypedCallParams<TSignature extends Arc200Sig | undefined> = {\n  method: TSignature\n  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>\n} & AppClientCallCoreParams & CoreAppCallArgs\n/**\n * Defines the arguments required for a bare call\n */\nexport type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>\n/**\n * Maps a method signature from the Arc200 smart contract to the method's arguments in either tuple of struct form\n */\nexport type MethodArgs<TSignature extends Arc200Sig> = Arc200['methods'][TSignature]['argsObj' | 'argsTuple']\n/**\n * Maps a method signature from the Arc200 smart contract to the method's return type\n */\nexport type MethodReturn<TSignature extends Arc200Sig> = Arc200['methods'][TSignature]['returns']\n\n/**\n * A factory for available 'create' calls\n */\nexport type Arc200CreateCalls = (typeof Arc200CallFactory)['create']\n/**\n * Defines supported create methods for this smart contract\n */\nexport type Arc200CreateCallParams =\n  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))\n/**\n * Defines arguments required for the deploy method.\n */\nexport type Arc200DeployArgs = {\n  deployTimeParams?: TealTemplateParams\n  /**\n   * A delegate which takes a create call factory and returns the create call params for this smart contract\n   */\n  createCall?: (callFactory: Arc200CreateCalls) => Arc200CreateCallParams\n}\n\n\n/**\n * Exposes methods for constructing all available smart contract calls\n */\nexport abstract class Arc200CallFactory {\n  /**\n   * Gets available create call factories\n   */\n  static get create() {\n    return {\n      /**\n       * Constructs a create call for the Arc200 smart contract using the createApplication()void ABI method\n       *\n       * @param args Any args for the contract call\n       * @param params Any additional parameters for the call\n       * @returns A TypedCallParams object for the call\n       */\n      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {\n        return {\n          method: 'createApplication()void' as const,\n          methodArgs: Array.isArray(args) ? args : [],\n          ...params,\n        }\n      },\n    }\n  }\n\n  /**\n   * Constructs a no op call for the arc200_name()string ABI method\n   *\n   * Returns the name of the token\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200Name(args: MethodArgs<'arc200_name()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_name()string' as const,\n      methodArgs: Array.isArray(args) ? args : [],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_symbol()string ABI method\n   *\n   * Returns the symbol of the token\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_symbol()string' as const,\n      methodArgs: Array.isArray(args) ? args : [],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_decimals()uint8 ABI method\n   *\n   * Returns the decimals of the token\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_decimals()uint8' as const,\n      methodArgs: Array.isArray(args) ? args : [],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method\n   *\n   * Returns the total supply of the token\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_totalSupply()uint256' as const,\n      methodArgs: Array.isArray(args) ? args : [],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method\n   *\n   * Returns the current balance of the owner of the token\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_balanceOf(address)uint256' as const,\n      methodArgs: Array.isArray(args) ? args : [args.owner],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method\n   *\n   * Transfers tokens\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_transfer(address,uint256)bool' as const,\n      methodArgs: Array.isArray(args) ? args : [args.to, args.value],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method\n   *\n   * Transfers tokens from source to destination as approved spender\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_transferFrom(address,address,uint256)bool' as const,\n      methodArgs: Array.isArray(args) ? args : [args.from, args.to, args.value],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method\n   *\n   * Approve spender for a token\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_approve(address,uint256)bool' as const,\n      methodArgs: Array.isArray(args) ? args : [args.spender, args.value],\n      ...params,\n    }\n  }\n  /**\n   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method\n   *\n   * Returns the current allowance of the spender of the tokens of the owner\n   *\n   * @param args Any args for the contract call\n   * @param params Any additional parameters for the call\n   * @returns A TypedCallParams object for the call\n   */\n  static arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {\n    return {\n      method: 'arc200_allowance(address,address)uint256' as const,\n      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],\n      ...params,\n    }\n  }\n}\n\n/**\n * A client to make calls to the Arc200 smart contract\n */\nexport class Arc200Client {\n  /**\n   * The underlying `ApplicationClient` for when you want to have more flexibility\n   */\n  public readonly appClient: ApplicationClient\n\n  private readonly sender: SendTransactionFrom | undefined\n\n  /**\n   * Creates a new instance of `Arc200Client`\n   *\n   * @param appDetails appDetails The details to identify the app to deploy\n   * @param algod An algod client instance\n   */\n  constructor(appDetails: AppDetails, private algod: Algodv2) {\n    this.sender = appDetails.sender\n    this.appClient = algokit.getAppClient({\n      ...appDetails,\n      app: APP_SPEC\n    }, algod)\n  }\n\n  /**\n   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type\n   *\n   * @param result The AppCallTransactionResult to be mapped\n   * @param returnValueFormatter An optional delegate to format the return value if required\n   * @returns The smart contract response with an updated return value\n   */\n  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {\n    if(result.return?.decodeError) {\n      throw result.return.decodeError\n    }\n    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined\n      ? returnValueFormatter(result.return.returnValue)\n      : result.return?.returnValue as TReturn | undefined\n      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult\n  }\n\n  /**\n   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP\n   *\n   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters\n   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type\n   * @returns The result of the smart contract call\n   */\n  public async call<TSignature extends keyof Arc200['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {\n    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)\n  }\n\n  /**\n   * Idempotently deploys the Arc200 smart contract.\n   *\n   * @param params The arguments for the contract calls and any additional parameters for the call\n   * @returns The deployment result\n   */\n  public deploy(params: Arc200DeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {\n    const createArgs = params.createCall?.(Arc200CallFactory.create)\n    return this.appClient.deploy({\n      ...params,\n      createArgs,\n      createOnCompleteAction: createArgs?.onCompleteAction,\n    })\n  }\n\n  /**\n   * Gets available create methods\n   */\n  public get create() {\n    const $this = this\n    return {\n      /**\n       * Creates a new instance of the Arc200 smart contract using the createApplication()void ABI method.\n       *\n       * @param args The arguments for the smart contract call\n       * @param params Any additional parameters for the call\n       * @returns The create result\n       */\n      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {\n        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(Arc200CallFactory.create.createApplication(args, params)))\n      },\n    }\n  }\n\n  /**\n   * Makes a clear_state call to an existing instance of the Arc200 smart contract.\n   *\n   * @param args The arguments for the bare call\n   * @returns The clear_state result\n   */\n  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.appClient.clearState(args)\n  }\n\n  /**\n   * Calls the arc200_name()string ABI method.\n   *\n   * Returns the name of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: The name of the token\n   */\n  public arc200Name(args: MethodArgs<'arc200_name()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200Name(args, params))\n  }\n\n  /**\n   * Calls the arc200_symbol()string ABI method.\n   *\n   * Returns the symbol of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: The symbol of the token\n   */\n  public arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200Symbol(args, params))\n  }\n\n  /**\n   * Calls the arc200_decimals()uint8 ABI method.\n   *\n   * Returns the decimals of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: The decimals of the token\n   */\n  public arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200Decimals(args, params))\n  }\n\n  /**\n   * Calls the arc200_totalSupply()uint256 ABI method.\n   *\n   * Returns the total supply of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: The total supply of the token\n   */\n  public arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200TotalSupply(args, params))\n  }\n\n  /**\n   * Calls the arc200_balanceOf(address)uint256 ABI method.\n   *\n   * Returns the current balance of the owner of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: The current balance of the holder of the token\n   */\n  public arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200BalanceOf(args, params))\n  }\n\n  /**\n   * Calls the arc200_transfer(address,uint256)bool ABI method.\n   *\n   * Transfers tokens\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: Success\n   */\n  public arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200Transfer(args, params))\n  }\n\n  /**\n   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.\n   *\n   * Transfers tokens from source to destination as approved spender\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: Success\n   */\n  public arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200TransferFrom(args, params))\n  }\n\n  /**\n   * Calls the arc200_approve(address,uint256)bool ABI method.\n   *\n   * Approve spender for a token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: Success\n   */\n  public arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200Approve(args, params))\n  }\n\n  /**\n   * Calls the arc200_allowance(address,address)uint256 ABI method.\n   *\n   * Returns the current allowance of the spender of the tokens of the owner\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The result of the call: The remaining allowance\n   */\n  public arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {\n    return this.call(Arc200CallFactory.arc200Allowance(args, params))\n  }\n\n  public compose(): Arc200Composer {\n    const client = this\n    const atc = new AtomicTransactionComposer()\n    let promiseChain:Promise<unknown> = Promise.resolve()\n    const resultMappers: Array<undefined | ((x: any) => any)> = []\n    return {\n      arc200Name(args: MethodArgs<'arc200_name()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200Name(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200Symbol(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200Decimals(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200Transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.arc200Allowance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {\n        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))\n        resultMappers.push(undefined)\n        return this\n      },\n      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {\n        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))\n        return this\n      },\n      async atc() {\n        await promiseChain\n        return atc\n      },\n      async simulate(options?: SimulateOptions) {\n        await promiseChain\n        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))\n        return {\n          ...result,\n          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)\n        }\n      },\n      async execute() {\n        await promiseChain\n        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)\n        return {\n          ...result,\n          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)\n        }\n      }\n    } as unknown as Arc200Composer\n  }\n}\nexport type Arc200Composer<TReturns extends [...any[]] = []> = {\n  /**\n   * Calls the arc200_name()string ABI method.\n   *\n   * Returns the name of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Name(args: MethodArgs<'arc200_name()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_name()string'>]>\n\n  /**\n   * Calls the arc200_symbol()string ABI method.\n   *\n   * Returns the symbol of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Symbol(args: MethodArgs<'arc200_symbol()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_symbol()string'>]>\n\n  /**\n   * Calls the arc200_decimals()uint8 ABI method.\n   *\n   * Returns the decimals of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_decimals()uint8'>]>\n\n  /**\n   * Calls the arc200_totalSupply()uint256 ABI method.\n   *\n   * Returns the total supply of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_totalSupply()uint256'>]>\n\n  /**\n   * Calls the arc200_balanceOf(address)uint256 ABI method.\n   *\n   * Returns the current balance of the owner of the token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_balanceOf(address)uint256'>]>\n\n  /**\n   * Calls the arc200_transfer(address,uint256)bool ABI method.\n   *\n   * Transfers tokens\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_transfer(address,uint256)bool'>]>\n\n  /**\n   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.\n   *\n   * Transfers tokens from source to destination as approved spender\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_transferFrom(address,address,uint256)bool'>]>\n\n  /**\n   * Calls the arc200_approve(address,uint256)bool ABI method.\n   *\n   * Approve spender for a token\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_approve(address,uint256)bool'>]>\n\n  /**\n   * Calls the arc200_allowance(address,address)uint256 ABI method.\n   *\n   * Returns the current allowance of the spender of the tokens of the owner\n   *\n   * @param args The arguments for the contract call\n   * @param params Any additional parameters for the call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, MethodReturn<'arc200_allowance(address,address)uint256'>]>\n\n  /**\n   * Makes a clear_state call to an existing instance of the Arc200 smart contract.\n   *\n   * @param args The arguments for the bare call\n   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions\n   */\n  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): Arc200Composer<[...TReturns, undefined]>\n\n  /**\n   * Adds a transaction to the composer\n   *\n   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)\n   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.\n   */\n  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): Arc200Composer<TReturns>\n  /**\n   * Returns the underlying AtomicTransactionComposer instance\n   */\n  atc(): Promise<AtomicTransactionComposer>\n  /**\n   * Simulates the transaction group and returns the result\n   */\n  simulate(options?: SimulateOptions): Promise<Arc200ComposerSimulateResult<TReturns>>\n  /**\n   * Executes the transaction group and returns the results\n   */\n  execute(): Promise<Arc200ComposerResults<TReturns>>\n}\nexport type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>\nexport type Arc200ComposerSimulateResult<TReturns extends [...any[]]> = {\n  returns: TReturns\n  methodResults: ABIResult[]\n  simulateResponse: modelsv2.SimulateResponse\n}\nexport type Arc200ComposerResults<TReturns extends [...any[]]> = {\n  returns: TReturns\n  groupId: string\n  txIds: string[]\n  transactions: Transaction[]\n}\n","import { Algodv2 } from 'algosdk';\nimport { SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction';\nimport { Arc200Client } from '../contracts/clients/Arc200Client';\n\ninterface IGetClientInput {\n  appId: number | bigint;\n  sender: SendTransactionFrom | undefined;\n  algod: Algodv2;\n}\n\nconst getArc200Client = (input: IGetClientInput) => {\n  return new Arc200Client(\n    {\n      sender: input.sender,\n      resolveBy: 'id',\n      id: input.appId,\n    },\n    input.algod\n  );\n};\nexport default getArc200Client;\n"],"mappings":"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","names":[]}